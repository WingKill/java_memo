20240125 20장 자바의 기본 클래스 - 21장 Generic 1

아이폰 개발 프로그래밍 언어
Object C -> swift 
최근에는 swift를 많이 쓴다.

안드로이드 개발 프로그래밍 언어
java , Kotlin
---
모든 언어는 반드시 자료형을 가지고 있어야 한다.
메모리 자체는 유한하기 때문에, 메모리 컨트롤을 하기 위함.
최근 나온 언어들은 기본 자료형을 지원하지 않고, 모두 참조형을 지원한다.
해당 부분을 덩달이 지원하기 위해 자바에서도 해당 객체를 만들어뒀다.
이게 wrapper class이다. genetic 지원 외에도 해당 이유가 지원 이유로 더 있는 셈.
---
박싱, 언박싱
- 박싱 : 기본형 - > wrapper 
- 언박싱 : wrapper - > 기본형

해당 wrapper 클래스는 추후 버전 업데이트로 오토 박싱, 오토 언박싱을 지원하게 되었다.
---
Boolean, Character 클래스를 제외한 모든 wrapper 클래스의 부모는 Number 클래스이다.
---
실무에서는 있는 거 잘 쓰길 바라는 편이라고. 직접 짜는 것보다는.
---
Object 클래스의 equals 메소드는
```
public boolean equals(Object obj) {
   if(this == obj) // 두 인스턴스가 동일 인스턴스이면
      return true;
   else
      return false;
}    // 이렇듯 Object 클래스에 정의된 equals 메소드는 참조 값 비교를 한다.
```
---
Object 클래스에서 자주 사용하는 메소드 : hashCode(), toString(), equals()
해당 메소드들은 오버라이딩해서 사용하게 될 것이다.
Object 클래스 자체가 모든 클래스들의 부모가 되므로...
그리고 Object 클래스의 메소드 내용은 원하는 값을 리턴하지 않는 경우가 생긴다. 
그래서 개발자들이 해당 메서드들을 오버라이딩하는 경우가 상당히 많다고.
---
Generic 
--- 
많은 개발자들이 Generic에서 깊게는 안 들어간다고
개발자들이 쓰는 부분은 어느 정도 정해져 있다. 
깊게 들어가면 상당히 어려운 부분이다.
---
응용해서 사용하기가 상당히 힘들다.
선배들이 이미 사용했다면, 이를 이해해여 활용해야 한다...
---
Generic은 자바 1.5버전 이후부터 사용 가능하다.
그 이전에는 활용할 수 없는 문법이다.
---
Generic 이전의 코드에서는, 모든 객체를 담는 클래스를 만들고자 할 떄 Object 클래스를 활용하여 구현할 수밖에 없었다.
해당 코드 작성 후 해당 클래스를 활용할 때에는 형변환 과정도 필요하고, 활용 후 오류가 발견되지 않는 경우도 있었다.
---
프로그래머의 실수로 컴파일 에러가 일어나는 것보다, 실행 과정에서조차 발견되지 않는 경우가 상당히 큰 문제다.
---
해당 문제는, 프로그래밍 언어에서 문법을 도입하여 컴파일 에러를 발생시키는 쪽으로 발전되었다.
---
generic을 가져다 쓰는 경우는 좀 있지만, 직접 generic 기반 클래스를 제작하는 경우는 별로 없을 것이다.
너무 걱정하지 마라.
---
클래스명<타입인자>{
}
---
타입 매개변수 : type parameter 
- 매개변수로 표현되는 문자는 주로 영문자T로 표현
- 변수 선언의 타입을 결정하는 역할을 한다.
- 인스턴스 생성 시 결정되는 자료형 정보를 T로 대체.
- 예시
```
class Box<T> {
   private T ob;

   public void set(T o) {
      ob = o;
   }

   public T get() {
      return ob;
   }
}
```
객체 생성 시 해당 객체의 자료형은 T에 들어오는 클래스명으로 결정된다.
---
Box<Apple> abox = new Box<Apple>();
type argument로 Apple이 들어왔다. 헤당 객체는 Apple 객체정보를 세팅하거나 가져올 수 있는 Box 객체가 된 것이다.
---
기본적으로, Generic을 도입한 코드에서는 형변환 과정이 없다. 
---
객체가 완전히 같으려면, 클래스명뿐만 아니라 내부 코드의 데이터들과 함수들이 다 같아야 한다.
하나라도 다르다면 그 객체들은 서로 다른 객체이다.
---
개발자들이 generic이 적용된 클래스들을 부를 때, 클래스명과 타입 매개변수를 이어붙여서 말한다. 
Box<Apple> box = new Box<Apple>(); // Box Apple이라 말함
---
Generic은 Object 기반으로 짜여진 클래스에서, 타입을 미리 정한 후 객체가 생성된다.
---
그래서, generic은 어떤 코드일 때 쓸 수 있는 걸까? 모든 코드에 쓸 수 있어? 라는 질문에 대한 챗 gpt의 답.
주로 다음과 같은 상황일 때 사용
- 컬렉션 프레임워크: 제네릭은 주로 컬렉션 프레임워크에서 많이 사용. 예를 들어, ArrayList<T>, HashMap<K, V>와 같은 컬렉션 클래스에서 타입 안정성을 제공하고 형변환을 피할 수 있다.
- 메소드의 매개변수나 반환 타입: 메소드에서 특정한 데이터 타입에 종속되지 않고, 다양한 데이터 타입에 대해 작동하는 일반적인 로직을 작성할 때 제네릭을 사용할 수 있다.
- 클래스의 일반화: 일반적인 로직을 가진 클래스를 작성할 때, 클래스가 다양한 데이터 타입에 대해 동작할 수 있도록 제네릭을 사용할 수 있다.
- 알고리즘 구현: 일반적인 정렬, 검색, 필터링 등과 같은 알고리즘을 작성할 때, 제네릭을 사용하여 다양한 데이터 타입에 적용할 수 있다.
---
다중 매개변수 제네릭 클래스 : 타입 매개변수가 2개 이상인 클래스.
예시 : 
```
class DBox<L,R>{
	private L left;
	private R right;
	
	public void set(L l, R r){
		left = l;
		right = r;
	}
	
	@Override
	public String toString() {
		return left+ "&" + right;
	}
}
```
---
generic 클래스는 타입 매개변수를 따로 지정하지 않으면, 기본적으로 모든 타입 인자로 Object를 사용한다. 
---