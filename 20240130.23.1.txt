20240130 23. 컬렉션 프레임워크1 

---
Iterator : 배열을 순서대로 나열할 때, for문을 제외하고 사용할 수 있는 방법 중 하나.
---
Set : 집합을 그대로 구현하려고 만든 인터페이스 
---
집합의 특징
- 중복 허용 불가. 
- 순서가 의미가 없음.
---
Set 과 List의 차이가 면접에 나올 수 있다.
---
Set 쓰기 좋은 예시 : 로또 번호 구하기
--- 
set에서, 동일 인스턴스에 대한 기준은 무엇인가?(동일한 객체를 구분하는 기준)
- 이 기준을 알지 못하면, 값은 동일하지만 주소값은 다른 객체를 도입하는 상황이 나올 수도 있다.
---
```
public native int hashCode(); // 주소 표현
// native는 자바 외 다른 언어로 구현했음을 나타내는 키워드라고 보면 된다.
```
```
    public String toString() {
        return getClass().getName() + "@" + Integer.toHexString(hashCode());
    }
```
---
지식, 기술, 태도 
- 6개월은 지식 때문에 부족하다고 하는 것이다.
- long run하기 위해 지식을 잘 키워보자.
---
hash : hash algorithm... 자바에서는 hash method를 일컫는 말일 것이다.
---
해시 알고리즘 
- 입력 데이터를 해시 값으로 변환하는 것
- 해시 알고리즘 체험 링크 : https://www.convertstring.com/ko/Hash
- 복호화 알고리즘이 없다. 입력 데이터로 다시 변환하는 게 안된다는 소리다.
- 복호화가 전혀 필요없는 것들에 사용한다.
``` 
public native int hashCode();
```
- 위와 같이, 자바 해시코드는 C언어(정확히 말하면 C++)를 사용하여 hashCode()를 짰다. 그 이유는 
- 암호화 모듈은 깨지게 되면 기본적으로 해킹의 대상이 되버리기 때문이다.
-> 소스 코드를 함부로 공개하지 않는 것.
- 해시 알고리즘에도 종류가 있으며, 각 알고리즘마다 출력값이 다르다.
ex)
MD5 (Message Digest Algorithm 5): MD5는 128비트 해시 값으로 출력
SHA-1 (Secure Hash Algorithm 1): SHA-1은 160비트 해시 값을 생성
---
챗 gpt에 의하면, 주로 사용하는 해시 알고리즘은 SHA-256 (Secure Hash Algorithm 256)이라고.
SHA-512 (Secure Hash Algorithm 512)도.. SHA-256은 256비트 해시값, SHA-512은 512비트 해시값을 생성한다.
---
JVM 내부에서는, 진짜 주소를 C언어로 가져온다. 
그리고 그 주소를 해시코드로 암호화과정을 진행하는것.
---
그래서 왜 이렇게 암호화를 하는가? 보안 목적을 빼고 더 생각해보면.
JVM : 32비트 
현재 사용하고 있는 window 운영체제 : 64bit
- 32bit로 표현되지 않는 데이터도 32bit로 표현하기 위해서... 해시코드로 변환하는 것. 
---
해시 알고리즘은 값을 바꾸는 알고리즘. 이를 어떻게 활용하는가?
- 분류 알고리즘 : 해시를 통해서 분류하는 것이 가장 속도가 빠르다고 알려져 있음.
- 해시 값은 일반적으로 데이터를 특정한 인덱스나 버킷에 매핑하여 저장하거나 검색하는 데 사용(챗gpt 내용)
---
Set에서, 동일한 인스턴스를 구분하는 기준
- hashCode() : 분류 알고리즘(군집)
- equals() : 값을 비교
---
그러므로, set의 출력값을 바꾸고 싶다면 객체에 hashCode()와 equals()를 구현하여 
메서드 오버라이딩하면 된다. 
---
Set에서 add()를 호출하여 다른 객체 주소를 넣는 경우
- 먼저, hashCode()를 호출 : 분류군(군집) 생성. 
- 해당 분류군에 객체가 있을 경우, equals()를 호출 : 동일 객체인지 확인.
- 보유하고 있는 객체를 Set에 위 함수 결과를 바탕으로 하여 구분해서 올린다.
---
Set 내 처리 속도 
- 군집을 여러 개 만든 객체가 적게 만든 객체보다 더 빠르다.
- 그렇다고 한 개의 객체 당 한 개의 군집을 두게 되면, 동등 비교 설정을 아예 할 수가 없다. 군집 하나당 객체 하나니까.
- hashCode()를 통해 생성한 값을 배열로 관리하기 때문에, 군집이 여러개일수록 빠르다.
- 군집을 여러 개 만들게 되면 군집에 들어가는 요소들이 줄어들게 된다.
- 군집 내 요소들은 LinkedList로 관리하기 때문에, 전부 다 하나씩 다 확인하게 된다. 
-> equals() 실행 시 많은 시간을 소요하게 된다. 하나하나씩 다 들어가서 값을 비교해야 하기 때문에...
- 단, 군집을 여러 개 만들수록 메모리를 더 많이 차지하게 된다.
-> 군집을 만드는 방 번호를 최대한 중복되지 않게 만드는 노력을 하게 된다고.
```
class Car {
   private String model;
   private String color;
   . . . . 
   @Override
   public int hashCode() {
      return (model.hashCode() + color.hashCode()) / 2;
   }
   . . . . 
}
```
: 모든 인스턴스 변수의 정보를 다 반영하여 해쉬 값을 얻으려는 노력이 깃든 문장.
---
기본적으로 HashSet(Set을 구현한 클래스)에서는 hashCode() 실행 시 메모리 주소값을 참조하여 한 객체당 하나씩 
해시 값이 할당된다.
-> 이러면 동등 비교 설정 불가능하므로, 요구사항에 따라 분류 조건을 설정(hashCode() 오버라이딩을 위한 구현)하게 된다.
---
TreeSet<E> 클래스 : Set을 구현한 클래스 중 하나.
- 정렬 상태를 유지하면서 인스턴스가 저장됨
- 정렬 기능이 없는 Set 구현 클래스들이지만, 정렬 기능을 추가한 클래스라고 보면 된다.
- 인스턴스 참조 순서는 오름차순을 기준으로 한다.
---
중복된 객체들을 삭제하여 목록을 뽑아내고자 할 때 Set을 활용하면 된다.
- 보통 List를 통해 리스트를 만들고, 필요할 때 Set을 호출하여 활용하는 방식으로 코딩하게 된다.
---
Queue<E> : 옛날에는 면접에 많이 나온 문법. 
---
Stack과 Queue의 차이
- Stack
	- LIFO(last-in-first-out)
	→ 먼저 저장된 데이터가 마지막에 빠져나간다.
	- push : 넣기, pop : 꺼내기
	- JVM의 callStack은 위와 같은 법칙을 따른다.
- Queue
	- FIFO(first-in-first-out)
 	→ 먼저 저장된 데이터가 먼저 빠져나간다.
	- offer : 넣기 , pull : 꺼내기
- Stack은 한 쪽이 막혀있고, Queue는 양쪽 모두 뚫려 있다고 표현한다.
- 정보처리기사에서도 나오고 기본서에서도 나오기 때문에 개발자들이 기본적으로 알고 있는 지식이라고.
- 모든 자료 구조, 알고리즘의 기본
---
LinkedList<E>는 List<E>와 동시에 Queue<E>를 구현하는 컬렉션 클래스
---
LinkedList<E>로 활용하면 되기 때문에, 직접 사용하는 건 잘 안한다고.
---
Stack 구현 : 이전부터 구현에 문제가 있었던 게 드러나 있는 상태이다.
- 1.5버전부터는 Deque를 활용하여 스택을 구현하게 됐다고 한다.
- 즉, Deque을 기준으로 스택을 구현하는 것이 자바에서의 원칙.
---
Map<K, V> : Mapping을 구현하도록 하는 인터페이스
---
K : Key
V : Value
---
Key는 중복되지 않는다.
Key에 Value를 넣으면, 이후에 넣은 Value로 바뀐다고.
---
HashMap<K, V> 클래스는 Iterable<T> 인터페이스를 구현하지 않는다.
-> for-each문을 통해서, 혹은 ‘반복자’를 얻어서 순차적 접근을 진행할 수 없다.
-> keySet()을 통해, Key를 따로 모아놓은 컬렉션 인스턴스를 생성할 수 있다. 
	- Key는 중복되면 안되므로 Set 인터페이스를 구현한 클래스를 활용.
-> 이 컬렉션 인스턴스를 통해 반복자를 사용.
---
스트림, 쓰레드 등을 더 배우고, 조 단위 프로젝트를 진행하는 걸로 한다.
-> 다음 시간에 배울 지식은 32장부터.
---



