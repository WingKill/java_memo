20240403 Spring

---

현업에서는 java 1.6버전을 많이 쓴다고 보면 된다.
-> 유지보수가 많기 때문.

---

Maven Dependencies
- pom.xml에 설정된 값에 따라 엄청나게 많은 라이브러리를 다운로드 받고 있는 상태

---

Spring의 src/main/resources 에 있는 static 폴더의 의미
- 정적 리소스를 담는 폴더



- 정적 리소스 : html, javascript, css, .txt, .img 등의 파일들
	- 자바 소스 코드가 들어가지 않는 파일들

- 동적 리소스 : jsp

---

static에 html 파일을 넣고 프로젝트를 실행하면, 해당 애플리케이션의 루트 경로로 접속했을 때 해당 html이 자동으로 연결된 상태이다.
- pom.xml 과 application.properties을 제외한 다른 설정을 하지 않은 상태니까... 그런 것일까.

물론, 실행 링크에서 파일명을 추가하여도 동일한 화면을 얻는다. 이건 뭐... 맞는 말.

검색해보니, 이걸 '웹서버와 연동된다'고 표현하고 있었다. 웹 서버에 의해 직접 제공된다고.

---

현업에서는, 절대 신입이 프로젝트를 직접 생성하지 않는다.
프로젝트 생성은 기본적으로 팀장이 한다.

- github / svn / cvn 등 다양한 형상관리툴을 사용하게 된다.
-> 입사하게 되면 해당 형상관리툴을 지정.

- 프로젝트 툴은 eclipse + plugin 형태로 제공 혹은, 돈 있는 회사라면 intelliJ를 주기도 함.
(물론 툴 좋은 거 쓴다고 코딩 잘하는 건 아님.)

- pom.xml을 열어본다.
	-> Spring boot version, project name 확인
	-> dependencies 내부의 dependency 들을 확인
- application.properties을 확인한다.

-> 설정 파일들의 설정 내역을 확인하는 것.

---

웹 프로그래밍을 하기 위해서는 반드시 웹 서버가 존재해야 한다.


jsp/servlet
1. tomcat 다운로드 및 설정
2. 서버 설정
3. Connection pool 지정
4. 실행 시 run on server로 실행

spring boot
1. tomcat (내장) - 다운로드할 필요 없음
2. 실행 시 spring boot app으로 실행

---

해당 부분은 선생님 설명과, 챗 gpt 검색결과를 섞어놓았음. 
실행 시 나오는 console 명령문 관련 수업 내용 + 검색 내용 수록

Starting SpringBootSsHello2Application using Java 11.0.21 on DESKTOP-J2TK4C1 with PID 302712 
- 프로그램을 메모리에 올려서 프로세스 생성
- Spring Boot 애플리케이션이 프로세스로 실행되고 있는 상태를 나타냄

Tomcat initialized with port(s): 8282 (http)
- 톰캣 서버 포트를 초기화
- 내장되어 있는 톰캣 서버 포트 설정. 이는 application.properties 파일 내 설정에 따름.

Initializing Spring embedded WebApplicationContext
- IOC container 생성하는 과정 : IOC container 이름이 WebApplicationContext 이라고 함 
- Spring Boot 애플리케이션의 초기화 중에 중요한 단계 중 하나 표시

Root WebApplicationContext: initialization completed in 79 ms
- Spring 웹 애플리케이션의 기본적인 설정이 완료되었음을 의미
- Root WebApplicationContext랑 WebApplicationContext는 같은 것인가? 
	-> 다른 것. 2개의 IOC container를 생성한다는 것을 의미한다.
	- Root WebApplicationContext : 보통 ContextLoaderListener를 통해 초기화
		- 애플리케이션의 전반적인 설정 및 빈 관리를 담당
	- WebApplicationContext : 보통 DispatcherServlet을 통해 초기화
		- 웹 애플리케이션과 관련된 설정 및 빈을 관리

Adding welcome page: class path resource [static/index.html]
	- 스프링 부트 애플리케이션에서 클래스 경로[static/index.html]에 있는 리소스를 환영 페이지(welcome page)로 추가
	-> 사용자가 애플리케이션에 접속할 때 자동으로 표시되는 초기 페이지를 설정할 수 있다. 
	- jsp/servlet에서는 web.xml 파일에 해당 부분을 설정하여 표시할 수 있었다.

Tomcat started on port(s): 8282 (http) with context path ' '
	- Tomcat 웹 서버가 8282번 포트에서 HTTP 프로토콜을 사용하여 시작되었고, 컨텍스트 경로가 비어 있음.
	-> 사용자가 애플리케이션에 접속할 때 기본적으로 이 경로가 사용된다고 함.
	- jsp/servlet은 tomcat을 직접 다운로드받아 설정한 상태 즉, 외장되어 있으므로 해당 프로젝트 경로가 컨텍스트 경로.
	- spring에서는 tomcat이 내장되어 있으므로 굳이 프로젝트 경로로 할 필요가 없음.

Initializing Spring DispatcherServlet 'dispatcherServlet'
	- DispatcherServlet : 클라이언트로부터 오는 모든 요청을 받아서 해당 요청을 처리할 컨트롤러에 전달하는 역할
	-> 웹 애플리케이션 컨텍스트에서 생성됨.
	-> 이 컨텍스트는 서블릿 컨텍스트와 유사하지만, DispatcherServlet에 의해 관리되는 Spring 빈들을 로드하고 관리
	- "dispatcherServlet"이라는 이름의 DispatcherServlet이 초기화되고 설정



---

web.xml 
	- tomcat 설정 파일
	- jsp/servlet 에서는 반드시 추가해야 했다.
	- spring boot에서는 반드시 추가할 필요는 없다.

---

DispatcherServlet
- Servlet WebApplicationContext 을 생성하고, 보통 Root WebApplicationContext 을 생성한다.
- 자세한 설명은 
https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/web.html#mvc-servlet 
를 참조한다.

---

```
@Controller 
클래스{

	@GetMapping("/home")
	함수{

	}
}
```
-> 클라이언트가 컨텍스트 루트 경로에 /home을 치고 오면 해당 함수가 실행된다.

---

Spring
- annotation program
-> annotation이 가지는 기능을 활용하여 프로그래밍을 한다.

---

jsp/servlet에서는 라이브러리를 적용시키려면 다운로드하여 lib 폴더에 넣었어야 했지만,
Spring은 pom.xml에서 dependency 태그를 적용시키면 알아서 다운로드받는다.

---

```
package edu.sejong.ex.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {
	
	@GetMapping("/home")
	public String home() {
		System.out.println("home()..");
		return "home";
	}
}
```
해당 구문을 실행했을 때 페이지가 나타나게 하려면, 페이지를 연결시켜줘야 할 것.

--- 

(실행과정을 보고 혼자서 생각해본 순서)

1. pom.xml 파일에 jstl과 tomcat-embed-jasper를 추가 
- jsp를 사용하기 위한 라이브러리 추가
```
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
```
2. src/main 이후 jsp 파일을 넣을 경로 설정. 폴더 생성 시, 경로를 설정하여 생성하면 됨.
```
webapp/WEB-INF/views
```

3. application.properties 파일 내 설정 추가
- jsp 파일이 있는 경로 설정
```
####  jsp
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
```

4. jsp 파일 생성
- return 값이 곧 jsp 파일 이름이 된다. -> home.jsp 생성

5. 프로젝트 서버를 멈추고, 다시 실행. 

---

원리
- jsp/servlet의 원리를 알면 spring의 원리도 이해하기 쉬울 것

- spring에서 jsp 파일을 서비스하고 싶다면  
	-> jstl, tomcat-embed-jasper 라이브러리를 다운로드받아야 한다.
	- tomcat-embed-jasper : jsp 파일을 해석하는 라이브러리
	- Spring boot부터는 일부러 jsp 관련 라이브러리를 빼놓은 상태이기 때문에 그렇다고.
		-> 미는 게 thymeleaf(타임리프)라고 한다. 물론 한국에서는 jsp가 표준...

- property를 본다. 
	- application.properties 파일 내에 설정을 추가
	
```
	spring.mvc.view.prefix=/WEB-INF/views/
	spring.mvc.view.suffix=.jsp
```
	-> 해당 코드는 경로를 설정하는 것이다. 어떻게?
	
	예시 코드가 다음과 같다고 할 때,
```
	@GetMapping("/home")
	public String home() {
		System.out.println("home()..");
		return "home";
	}
```	
	- 해당 설정을 한 상태라면 return 값이 "/WEB-INF/views/home.jsp"이 된다고 보면 된다.
	-> 리턴값 앞 뒤로 붙이는 텍스트를 설정하여, 파일 경로를 전달하는 것이다.

	
	- 원래대로라면, home.jsp에 있는 내용을 그대로 복사하여, 그 내용을 문자열로 리턴해야 한다.
	-> 그러면 누가 사용하겠는가. 사용할 때 너무 불편하지.
	-> 경로로 전달하고, 해당 경로를 통해 파일에 접근하는 방식이 훨씬 간편할 것

- @Controller와 @GetMapping
	- @Controller : 클래스 위에만 붙는 에너테이션
		- @Component + 의미
			- @Component : 해당 클래스 형태로 객체를 생성해주는 기능. Spring에서 가장 많이 사용됨.
		- IOC 컨테이너 중 Root WebApplicationContext에 객체를 생성한다고 함.
		- jsp/servlet에서 만드는 Controller의 기능을 그대로 가져다 놓은 것.
	- @GetMapping
		- uri에서 contextPath를 통해 command를 얻고 그 부분을 가지고 처리하는 기능을 가진다.
		- 해당 에너테이션은 get 방식으로 요청한 부분을 의미.
		- 즉, @PostMapping도 있다는 것.
	
---

Spring으로 프로젝트하시는 분들은 DispatcherServlet을 다 외우고 있다고.

---

Spring에서 Controller의 역할은, 'URL 처리'이다. 
-> 기능이 들어가면 안된다.

- jsp/servlet에서 만드는 Command 클래스의 역할을, Spring에서는 @Service로 처리한다고 한다.

---
