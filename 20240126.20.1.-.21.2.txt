20240126 20장 제네릭1 - 21장 제네릭2

타입 인자에 primitive type은 오지 못한다. 객체 타입만 가능.
-> 제네릭 사용 시 wrapper 클래스를 사용하게 됨.
---
<> : 다이아몬드 기호
```
Box<Apple> aBox = new Box();
// 해당 사례처럼, 생략이 가능. 컴파일러가 앞의 참조변수 선언을 확인한 뒤 유추한다.
```
---
```
class Box<T> {
   private T ob;

   public void set(T o) {
      ob = o;
   }
   public T get() {
      return ob;
   }
}

public static void main(String[] args) {
   Box<String> sBox = new Box<>();
   sBox.set("I am so happy.");
   
   Box<Box<String>> wBox = new Box<>(); // 매개변수화 타입을 타입 인자로 전달
   wBox.set(sBox);

   Box<Box<Box<String>>> zBox = new Box<>();
   zBox.set(wBox);

   System.out.println(zBox.get().get().get());
}
```
타입 매개변수로 제한된 건 객체일 뿐, 제네릭 클래스를 못 넣는 건 아니니까...
해당 코드도 가능한 게 아닐까 싶다.
보기엔 어려워 보인다. 아니, 복잡해 보인다. 
근데 이거 실제로 쓰긴 하나...? 흠. 이렇게 사용할 수 있다는 것만 개념만 알고 있어야 겠다.
현업에서는 안쓰고, 코딩 시험에 나온다ㄱ.. ㅡㅡ...
---
제네릭 클래스의 타입 인자 제한을 걸 수 있는가?
```
class Box<T extends Number> 
```
해당 클래스는 Number 혹은 Number를 상속하는 클래스만 올 수 있다.
(Number와 Number의 자식들만 가능하다.)
함수처럼 8개의 primitive type으로 제한하는 게 아니다.
---
'동적' : dynamic. 이 단어가 사용되는 맥락에 따라 다양한 의미를 가진다.
이를 망각하면 개념이 상당히 헷갈릴 수 있다.
---
자바의 제네릭은 제네릭만의 내용으로 알고 있어라.
하다못해 다른 언어에 비슷한 방식으로 작동하는 클래스가 있다고 하더라도, 깊게 들어가면 엄연히 다른 요소가 존재하는 것들이다.
공부할 때 해당 부분과 비슷하다는 것을 참고하는 정도가 되어야지, 뭉뚱그려서 해당 개념을 통칭하고 넘어가버리면 큰일난다.
---
반드시 10년 20년하다보면 설계가 필요하다거나, 코드가 눈에 들어오는 경우가 있다고
---
타입인자 제한은, 부모에 있는 메서드를 사용하기 위해 제한을 거는 경우가 실질적으로 많다고 한다.
---
물론 타입인자 제한에 클래스만 오는 것이 아니라, 인터페이스도 올 수 있다.
클래스는 인터페이스의 경우 implements 키워드를 썼지만, 타입인자의 경우에는 extends로 클래스와 사용 키워드가 같다.
아무래도, 인터페이스를 구현해야 하는 클래스도 아니고 해당 인터페이스를 구현한 자식들을 활용하기 위해서 그런 것 같다. 
```
interface Eatable { public String eat(); }
class Box<T extends Number & Eatable>  // Number : 클래스명, Eatable : 인터페이스명
```
심지어, 위와 같이 타입인자는 하나의 클래스와 하나의 인터페이스에 대해 동시 제한을 둘 수 있다. 
---
제네릭 메서드 : 어려운 부분 중 하나.
클래스 전부가 아닌, 메소드 하나에 대해 제네릭으로 정의하는 것.
일반 개발자들은 잘 안쓰긴 한다. 
---
제네릭 클래스 형태 : <>가 클래스명 뒤에 붙음 : class Box<T>
제네릭 메서드 : <>가 함수 데이터 타입 앞에 붙음 : public static <T extends Number> BoxTesting<T> makeBox(T o)
---
```
   public static <T> Box<T> makeBox(T o) {
      Box<T> box = new Box<T>();   // 상자를 생성하고,
      box.set(o);   // 전달된 인스턴스를 상자에 담아서,
      return box;   // 상자를 반환한다.
   }
```
---
```
Box<String> sBox = BoxFactory.<String>makeBox("Sweet");
Box<String> sBox = BoxFactory.makeBox("Sweet");
```
제네릭 메서드의 T는 메서드 호출 시점에 결정되며, 타입 인자는 생략가능하다.
메모리 올라갈 땐 메서드의 타입 인자는 사라지고, 결정되는 타입으로 메서드 형태가 갖춰진다.
클래스는 호출 시 똑같이 클래스명 뒤에 오지만, 제네릭 메소드의 타입 인자는 메소드명 앞에 표시된다.

기본적으로 리턴되는 데이터 타입 앞에 타입 매개변수가 서술되기 때문에, 이와 맞추려고 앞에 표시되는 거 같다...
---
public static <T extends Number> BoxTesting<T> makeBox(T o)
---
제네릭 클래스의 상속관계를 따지자면, 같은 타입인자를 가진 클래스들끼리 상속관계를 가질 수 있지만
같은 타입인자가 아니라면 서로 상속 관계가 아니다.
---
Box<String> sBox = new Box<>();
참조변수의 형Box<String>을 기반으로, Box<>의 T를 결정한다. 
이를 타겟 타입이라고 한다.
---
Box<object>는 Box<String>의 부모가 아니다.
아예 다른 데이터 타입일 뿐이다. 모든 객체의 부모는 Object로 설정되어있지만, 그건 자바에서 그리 정한 것.
Box<object>가 Object 클래스는 아니지 않은가. 
Box<T> 즉, 모든 타입인자를 받고 싶다면.. 애초에 클래스명을 넣으면 안되지.
다른 문법요소를 통해 표현하는 게 낫다. 
---
와일드카드 : 모든 타입인자를 다 받는다는 의미. 부모라는 의미는 없다. 그럴 수가 없으니까.
```
public static void peekBox(Box<?> box) {
   System.out.println(box);
}
// Box<?> : Box<T> 형태의 모든 클래스들을 일컫는다.
```
---
와일드 카드를 사용한 함수는 와일드 카드 함수라고만 표현한다. 
```
public static <T> void peekBox(Box<T> box) {
   System.out.println(box);
} 

public static void peekBox(Box<?> box) {
   System.out.println(box);
}
// 두 가지 코드는 기능적으로 완전히 같다. 
// 와일드카드 기반 메서드를 우선시하라고 권고하지만, 실무에선 섞어쓴다고.
```
---
와일드카드 상한 제한 예시
Box<? extends A> : Box<> 중 <>에 A 또는 A를 상속하는 클래스들(자식)만 해당된다.
와일드카드 하한 제한 예시
Box<? super B> :  Box<> 중 <>에 B 또는 B가 상속하는 클래스들(부모)만 해당된다.
와일드카드의 제한에 걸리는 상황이면 컴파일 에러를 발생시킨다. 
이 부분 때문에 사용하는 것이다. 
---
와일드 카드가 나온뒤, 상한 하한은 주로 setter and getter에 제한을 둘 때 사용되더라.
다형성을 활용.
예시
```
class Box<T> {
   private T ob;
   public void set(T o) { ob = o; }
   public T get() { return ob; }
}
class Car extends Toy {...}    // 자동차 장난감
class Robot extends Toy {...}    // 로봇 장난감
public static void outBox(Box<? extends Toy> box) {
   box.get();   // 꺼내는 것! OK!
   box.set(new Toy());   // 넣는 것! ERROR! 
   // 다형성에 위배된다. 본인 이하 하위 클래스들이 대입되어야 하는 상황에 허용되는 범위가 본인만 있음.
}
```
---
당연하게도, getter만 호출하는 것 자체는 된다.
그러나 getter를 호출하는 건 보통 참조 타입의 변수에 대입할 때 호출한다.
해당 시점에 호출시, 와일드카드 하한 제한을 건 경우에는 컴파일 에러가 발생하는 것이다.
---
와일드 카드가 도입된 메서드의... 메서드 오버로딩은 가능한가?
```
// 예시1 : 메서드 오버로딩 인정 안됨. 
   public static void outBox(Box<? extends Toy> box) {...}
   public static void outBox(Box<? extends Robot> box) {...}
``` 
해당 경우는 메서드 오버 로딩이 허용되지 않는다.
메모리에 올라갈 때 와일드 카드 부분이 지워지니까... type erasure 때문이란다.
그래서, 매개 변수 하나 더 둬서 구분한다고...  예시2처럼.
```
// 예시2 : 메서드 오버로딩됨.
   public static void inBox(Box<? super Toy> box, Toy n) {...}
   public static void inBox(Box<? super Robot> box, Robot n) {...}
```
---
이런 꼼수..? 아무튼 저런 방식으로 하는 걸 선호할 리가 없다.
결국은 와일드 카드 선언을 갖는 메소드를 제네릭으로 바꿔버린다. 섞어서 표현한단 소리다.
```
// 예시3. 예시2의 경우에는 항상 오버로딩할때마다 변수 하나를 추가적으로 줘야 하므로, 
// 해당 과정을 피하기 위해 제네릭을 활용하는 것이다.
// 아래와 같이 작성하면 메서드 오버로딩도 자연스레 적용된다고.
   public static <T> void outBox(Box<? extends T> box) {...}
``` 
---
