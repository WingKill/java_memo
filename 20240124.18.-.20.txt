20240124 18장 예외처리 - 20장 자바의 기본 클래스

JVM
---
개발자들은 try catch finally 구문에서. finally를 안쓰는 경우가 많다.
---
try 안에 만들어 놓은 코드는 기본적으로 finally에 만들어놓는다. 
try 내 에러가 있든 없든 실행되어야 하는 코드가 있다면 finally를 넣어줘야 한다.
---
자바 람다, 스트림 : 1.8부터 지원
- 현장에서 쓰시는 분 생각보다 별로 없다
- 나온지 10년 가량 된 상황이라고
- 기존에 있는 코드가 잘 돌아가니까 굳이 바꿀 생각하지 않는다.
---
Connection 
PrepareStatement
ResultSet
을 닫는 가장 이상적인 방식은 
항상 finally에 try catch문을 추가로 넣었었다고.
---
try(조건문){
	실행문
}
객체에 .close()가 있는 경우에는 해당 try with resource를 활용하면 더욱 안정적으로 사용가능
---
기존 코드가 아래와 같다면..

   Path file = Paths.get("C:\\javastudy\\Simple.txt");
   BufferedWriter writer = null;   
   try {
      writer = Files.newBufferedWriter(file);   // IOException 발생 가능
      writer.write('A');   // IOException 발생 가능
   }
   catch(IOException e) {
      e.printStackTrace();
   }
   finally {
      try {
         if(writer != null)
             writer.close();    // IOException 발생 가능
      }
      catch(IOException e) {
         e.printStackTrace();
      }   
   }

---
try with resource를 활용하여 finally를 사용하지 않고 해결할 수 있다.
try(BufferedWriter writer = Files.newBufferedWriter(file)) {
   writer.write('A’);
   writer.write('Z');
}
catch(IOException e) {
   e.printStackTrace();
}
- try 구문을 빠져 나갈 때 다음 문장을 안정적으로 자동 실행.  writer.close(); 
---
래퍼 클래스 : wrapper class
---
래퍼 클래스는 기본 자료형의 값을 감싸는 목적으로 만들어진 클래스
---
1.9버전부터는 자바에서 Integer 클래스를 지원하지 않겠다는 듯, 줄이 그어진다. 
물론, 생성자. new Integer() 생성자가 deprecated 처리된 것.
래퍼 클래스는 8개이므로 8개를 지원한다.
Boolean, Character, Byte, Short, Integer, Long, Float, Double
---
데이터 타입에 맞는 값을 변수로 받아 생성자를 통해 객체에 담는 것.
---
박싱 : 기본 데이터 타입의 값을 객체에 바로 담는 것.(컴파일러가 자동으로 생성자를 호출하여 값을 대입하는 것.)
언박싱 : 객체에서 기본 데이터 타입의 변수에 값을 바로 담는 것.(컴파일러가 자동으로 값을 리턴하는 함수를 붙여주는 것.)
래퍼 클래스만 해당 처리가 되어 있다고 보면 된다.
---
   Integer num = 10;
   num++;     // new Integer(num.intValue() + 1); 실제로는 해당 과정을 컴파일러에서 자동으로 진행하는 것.
오토 박싱과 오토 언박싱이 동시에 진행된다고.
---
연산하기 
- primitive type 쓰기
- wrapper class 쓰기 - 메모리
---
wrapper class에서, 값을 받는 변수는 final로 선언되어 있다. 
불변 : 새로운 값을 세팅한다면, 새로운 객체가 생성될 수밖에 없다. 
---
Number : Character,Boolean을 제외한 모든 wrapper 클래스는 해당 클래스를 상속한다.
---
- 웹 사이트를 통해서 코딩시험을 치르는 것
- 도착지역에서 코딩시험을 치르는 것
---
코딩 시험에서 성의를 보여라
- 정답이 아니더라도 한글로 해당 문제의 문법적 사항, 해설 요소를 표현하라.
- 절대 평가가 아니라 상대 평가이다.
---
Integer.valueOf(i) // i를 Integer 데이터 타입으로 리턴하는 static 메소드
Integer.toBinaryString(i); // i의 2진수 구하는 static 메소드
Integer.toOctalString(i); // i의 8진수 구하는 static 메소드
Integer.toHexString(i); // i의 16진수 구하는 static 메소드
Integer.max(a,b); // a와 b 중 큰 수 구하는 static 메소드
Integer.min(a,b); // a와 b 중 작은 수 구하는 static 메소드
Integer.sum(a,b); // a와 b 의 합을 구하는 static 메소드
Integer.MAX_VALUE // int 최대값 리턴하는 static 메소드 
Integer.MIN_VALUE // int 최소값 리턴하는 static 메소드
---
BigInteger 클래스 : 매우 큰 정수(Long 타입이 넘는 수)를 표현하기 위한 클래스
BigInteger() 생성자는 String형 변수를 매개변수로 갖는다.
---
Integer.MAX_VALUE + 1 : 오버플로우
- 오버플로우는 데이터 타입의 표현 범위를 초과하여 값이 표현될 때 발생.
해당 상황에서는 바로 범위의 최소값이 나와버린다. 
해당 수를 표현할 수 있는 방법이 없어서 해당 범위의 최소치부터 다시 시작하는 상황인 듯 하다.
---
실수는 기본적으로 오차가 있다... 한정된 메모리로 무한한 수를 표현할 수 없으니까...
그래서 실무에서는 소수점 표현을 다 하지 않고 버려서 표현.
그러나 국방이나 과학에서는 최대한 정확한 표현을 사용해야 한다.
어떠한 값을 오차없이 표현하고 싶을 때 사용하는 클래스 : BigDecimal
---
은행의 경우에는 소수 두번째 자리까지만 취급하고, 그 아래는 버린다고.
---
Math 클래스 : 수학관련 연산 기능 제공
Math.sqrt(2) : 2의 제곱근 
Math.pow(2, 16) : 2의 16승 표현.
---
난수 : 랜덤 수
Random : 난수 생성을 위한 객체
---
이클립스 import 단축 키 : 드래그 후 ctrl + shift + o
난수는 실행할 때마다 다르게 생성되므로 실행 결과가 항상 다를 것이다. 
난수 생성의 기반이 되는 시드(seed) 값이 고정되어 있다면, 동일한 시드를 사용하면 항상 같은 난수가 생성된다 
---
Random 클래스의 난수 표현 원리
: Random 클래스는 난수 테이블을 가지고 있다. 시드값을 넣으면, 이에 해당되는 숫자들을 리턴해주는 것.
랜덤 함수가 난수 테이블을 가지게 된 이유 
- 처음에는 CPU가 일일히 그 때 그 때 다시 생성했었다. 
- 똑같은 컴퓨터에 일일히 랜덤을 돌리니, 특정한 수에 자꾸 몰리는 상황이 나옴.
(컴퓨터 자체적 문제가 아닐까..)
- 균등한 확률 분포를 맞추기 위해 아예 표를 만들어서, 해당 표를 사용하도록 진행하게 됨.
---
StringTokenizer : 문자열을 토큰구분하여 나누는 데 사용하는 클래스
꽤 자주 쓴다고 함.
---
