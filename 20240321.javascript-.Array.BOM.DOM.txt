20240321 javascript-내장객체(Array, BOM, DOM)

---

내장객체-3
	- Array : 배열을 나타날 때 사용하는 객체
	- 지원함수
		- join() : 배열 안에 있는 값을 나열.(String으로 바꿔서 나열하는 것.)
		- reverse() : 반대 순서로 나열 - 가변 
		- sort() : 정렬. 오름차순이 기본값.  - 가변
		```javascript
				// 오름차순
			        document.write(arr4.sort(function(a,b){return a-b}) + "<br>");
				// 내림차순
      				document.write(arr4.sort(function(a,b){return b-a}) + "<br>");
		```			
		- slice(a,b) : 인덱스 x의 범위만큼 값을 나열. (범위 : a<= x <b ) - 불변
		- push() : 값 추가
		- shift() : 배열 첫 번째 데이터 삭제
		- pop() : 배열 마지막 데이터 삭제
		등...
		- 함수마다 불변이 있고, 가변이 있다.

---

가변 
- 원본의 내용 변동

불변
- 원본의 내용 변동없음

---

배열 
- 인덱스를 이용해서 n개의 데이터를 하나의 변수에 담고 있는 형태
- 데이터 : 숫자, 문자열, 불리언, 함수, 객체, undefined
- 자바스크립트에서는 데이터 타입이 달라도 한 배열에 같이 넣을 수 있다.
-> 자바스크립트에서는 모든 값이 참조형이니까.

---

document.write()의 경우에는 무조건 String으로 변환해줘야 하는 단점이 존재.
console.log()는 디버깅용으로 사용된다. 

---

개발자들은 소스 코딩보다 디버깅에 시간을 더 보낸다.

---

BOM
- Browser Object Model : 브라우저와 관련된 객체를 의미함.
- 모든 웹 브라우저에서 공통적으로 사용하는 객체들이다. 
- 종류
	- Window : 웹 브라우저를 나타내는 객체
		- Location 
		- History
		- Screen 
		- Navigator

---

Window
- window라는 내장 객체로 표현됨.
- 해당 객체를 통해 내부 함수에 접근할 수도 있지만, 기본적으로 객체명은 생략 가능.
- 웹 브라우저를 컨트롤할 수 있음.
	- alert() : 웹 브라우저에서 새 팝업창을 띄움
	- console.log() : 콘솔창에 로그를 띄움
	- open() : 창을 연다.
	- moveTo(a,b) : 창의 위치 (a,b)로 이동
	- moveBy(a,b) : 기존 창의 기존 위치에서 (a,b)만큼 더함.
	- resizeTo(a,b) : 창의 크기를 (a,b)로 설정
	- resizeBy(a,b) : 기존 창의 기존 크기를 (a,b)만큼 더함.
	- onload() : 브라우저에 함수를 등록. 
		- HTML 파일 내 내용들을 모두 메모리에 올리고 나서, 해당 함수를 웹 브라우저가 실행.
	등...

---

screen 객체
- 웹브라우저 창 정보를 담고 있는 객체

---

location 객체
	- 브라우저의 현재 URL을 변경하는데 사용되는 것들
		- href 
			- 웹브라우저의 히스토리에 새 항목으로 추가됨
			-> 뒤로가기 버튼을 사용하여 이전 페이지로 이동 가능
			- 주로 페이지를 이동하거나 리다이렉트할 때 사용
		```
		// 현재 페이지를 새로운 URL로 이동합니다.
		location.href = "https://example.com/newpage";
		```
		- assign : href와 달리 함수형으로 사용됨. href와 동일

		- replace
			- 웹브라우저의 히스토리에 새 항목으로 추가되지 않고, 이전 페이지의 히스토리가 수정됨
			-> 뒤로 가기 불가.
			- 주로 이전 페이지의 내용을 대체하거나 새로운 페이지를 로드할 때 사용	
		```
		// 현재 페이지를 새로운 URL로 대체합니다.
		location.replace("https://example.com/newpage");
		```

---

jsp의 페이지 이동 방식
- redirect
	- response객체에 있는 redirect()를 활용
- forward
	- action tag로 forward 가 존재
	- servlet 상에서는 dispatcher(RequestDispatcher 데이터 타입) 내 있는 forward()를 활용

---

서버 개발자
- 서버 코드를 이해할 수 있는 개발자

---

DOM(Document Object Model)
	- 이 객체를 다루기 위해서, 자바스크립트를 하는 거라고 한다.
	- 문서 객체
	- html 객체를 생성, 추가, 삭제, 이동 등의 작업이 가능.
	- document 객체

---

자바스크립트는 한 줄씩 읽어서 바로 실행하는 방식을 사용하기 때문에,
해당 부분을 고려하여 스크립트를 작성해야 한다.

```
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="js/hello.js" type="text/javascript"></script>
    <script>
         var element1 = document.createElement("p");
         var text1 = document.createTextNode("자바스크립트");

         element1.appendChild(text1);
         document.body.appendChild(element1);    
    </script>
</head>

<body>

</body>

</html>
```

위 소스 코드가 안되는 이유는, 해당 script태그에서는 body 태그를 읽기 전 상태이기 때문이다.
-> 1. body 태그 안이나, 이후 위치로 script 태그를 옮기면 해결된다.
-> 2. window.onload에 해당 구문들을 실행하는 함수를 할당하면 해결된다. 
	- onload는 모든 HTML 태그들을 메모리에 올린 뒤 (실행한 뒤) 마지막에 웹 브라우저가 해당 부분에 저장된 것을 실행하기 때문.

```
        window.onload = function(){
            var element1 = document.createElement("p");
            var text1 = document.createTextNode("자바스크립트");

            element1.appendChild(text1);
            document.body.appendChild(element1);
        }   
```

자주 일어날 수 있는 에러 사항이니, 이에 대해서는 충분히 고려해야 한다.

---

document 객체가 보유한 변수나 함수들

- innerHTML 
	- 해당 속성에 새로운 값을 넣으면, 호출한 요소의 내용을 교체한다.
	-> 기존에 있던 내용이 새로운 값으로 대체된다.
	ex) document.body.innerHTML의 값을 할당할 경우, 기존 body의 내용이 나오지 않고 넣은 값의 내용이 나오게 된다.

- getElementById(a)
	- document에서, ID가 a인 element를 가져온다.

- 'getElementBy~ (a)'의 형태를 가진 함수들은 모두 document에서 ~가 a인 element를 가져오는 것이다.

---

querySelector

- 'getElementBy~' 와 비슷한 역할을 함
- 그러나 'getElementBy~'와 달리 id, class, 복합 태그 모두 가져오기가 가능.
- 괄호 속에 제공한 선택자와 일치하는 문서 내 첫 번째 element를 반환
-> 일치하는 요소가 없다면 null 반환

- querySelector(a)에서, a에 들어가는 이름들은 css 문법 표기 방식과 동일하다.
```
document.querySelector("h1");
document.querySelector(".h2");
document.querySelector("#h3");
document.querySelector("div span");
document.querySelector("div span:first-child");
document.querySelector("div span:nth-child(2)");
```
- 요소를 삭제할 땐, 부모 객체를 찾은 뒤 자식 객체를 찾아 삭제해야 한다.
- remove()

---

CSS 

div span : 후손
div > span : 자식

---



