2024-03-18 javascript(자바스크립트)

---

javascript에서, while문을 쓸 땐 조건을 제대로 걸거나 break를 제대로 해야겠다.

---

break 문은, if문이 아니라 반복문과 switch문을 빠져나오는 것이다.

---

function - 함수 생성 시 사용하는 타입

---

익명함수 - 모든 언어에 해당 개념이 존재.

```javascript
        // 명시(선언)적 함수 생성
        function funName(){
            document.write("명시적 함수입니다." + "<br>");
        }

        funName();
        funName();

        // 익명 함수

        var funAnomynous = function(){
            document.write("익명 함수입니다. " + "<br>");
        }

        funAnomynous();
        funAnomynous();
```

- 함수 이름이 없음.
-> 초기 생성 후 접근이 불가능. 
-> 변수에 할당하면 사용이 가능.
-> 익명 함수가 할당된 변수를 함수 변수라 표현함.

---

```javascript
	console.log("funName 함수 보기 : \n" +  funName);
        console.log("funName 함수 실행 : \n" +  funName());
```

자바에선 함수명만 적어서 함수 자체를 뿌려주는 기능이 없다.
자바스크립트에선, 함수명만 적어서 함수 자체를 뿌려줄 수 있다.(내부 내용을 볼 수 있다.)

함수 실행을 위해 호출하려면, 함수형태로 표현해야 한다.

---

자바에서는 return type에 맞는 데이터타입을 표현하지만, 
자바스크립트는 애초에 그렇게 표현하지 않는다. 

자바스크립트에서는, function 호출 방식이 자바와 동일하지 않다.

---

선언된 메서드를 호출할 때, 파라미터 개수가 달라도 에러 페이지를 띄우지 않고 실행된다.
NaN 값이 나오든, 기존 값과 동일하게 나오든..

---

arguments는 함수에 전달된 인수들을 포함하는 객체
- 함수 내부에서 사용 가능.
- 함수 호출 시 자동 생성

유사 배열 객체이지만, 배열은 아니다.
- 자바로 생각하면, 차라리 default 생성자와 유사하다고 보는 편이 낫다.
- 자바스크립트에서는 모든 것이 객체니까... 함수도 객체다. 

- 함수에 전달되는 인수의 개수가 매개변수의 개수와 차이가 나더라도, 해당 객체로 인해 에러 창이 뜨지 않는 것이라고 한다.

---

인수 : 함수를 호출할 때 함수에 전달되는 값
매개변수 : 함수를 정의할 때 함수에 전달되는 값을 받아들이는 변수

---

function 
- 개발자들이 해당 부분을 활용해서 코딩을 많이 한다.
- class보다 더 많이 쓴다. 
- 중요하다.

---

명시적 함수 
- html문서가 실행될때  가장 먼저 실행됨.

익명함수
- html문서가 실행될때 위에서 부터 순차적으로 실행됨.

---

자바스크립트에서, 함수는 또 다른 함수를 반환할 수 있다.
- 모든 데이터들이 객체 형태로 담기니까.
- 반환되는 함수를 리턴 함수라고 한다.

---

Closure
- 함수가 자신을 포함하는 범위의 외부 변수를 포획하여 기억한다는 개념을 표현
- 리턴 함수를 포함하고 있는 함수 내, 리턴 함수 범위 바깥에 변수가 선언된 경우 해당 개념이 성립. 
-> 외부 변수를 참조하고 있어야 한다는 조건이 붙음.
-> 리턴 함수로서의 역할 뿐만 아니라, 외부 변수 정보를 가지고 있는 클로저로서의 역할을 하게 된다.

1. free variable(자유 변수)에 의해서 함수가 닫혀(closed) 있다.
2. 반환된 함수의 life-cycle가 종료될 때까지 호출된 함수의 life-cycle이 유지되는 것

---

함수 안에 함수를 만들 수 있다.
- 내부 함수
- 외부에서는 호출 불가
-> 내부 함수를 가지고 있는 함수 내에서 호출하여야 함.

---

콜백(callback)함수
- 매개변수로 함수를 전달하고, 전달된 매개변수가 특정 시점에 호출되는 것
- 함수 자체를 매개변수로 넘기는 것.
- 기존에 구현된 대다수의 함수가 콜백 함수의 형태로 구현되어 있다.

---


