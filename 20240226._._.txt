20240226 웹 프로그래밍_구현_

---

소스 코드 수정은 최대한 지양해야 한다.

sql join 처리할 땐 dto 클래스를 새로 생성해주는 게 좋다.

꺼내오는 데이터가 적을때는 괜찮지만, 모든 데이터가 기본적으로 필요한 경우가 생길 수 있다.

---

게시판 짜기 - MVC 모델을 활용하여 만들기

MVC 모델 - 현업에서는 무조건 해당 방식으로 구성하여 짜야 한다.

---

그 동안, form에서 jsp 파일로 이동시켜서 처리를 따로 진행했었다.
현업에서는 이렇게 하지 않는다. 

---

Controller - Servlet으로 만든다.

---

@WebServlet("*.do") 
- .do로 들어오는 모든 파일은 해당 servlet에서 처리하겠다는 의미

---

System.out.println("doGet() .."); 
- 언제부턴가 디버깅 문구 방식이 위와 같이 정해졌다.

---

패턴 : 표현을 이렇게 하면 안되지만, 쉽게 이해하자면 이미 소스코드가 정해져 있다는 의미
- 정해진 방식대로 코딩하라는 의미이기도 하다.

---

에릭 감마 
- '디자인 패턴' 저자 - 저자가 경험상 마주했던, 소프트웨어 설계 방식 23가지에 대한 소개
- 이클립스 초기 제작자

---

		String uri = request.getRequestURI();
		System.out.println("uri : " + uri);
		
		String contextPath = request.getContextPath();
		System.out.println("contextPath : " + contextPath);
		
		String command = uri.substring(contextPath.length());
		System.out.println("command : " + command);


uri = contextPath + command

---

url 주는 방법 

	<a href="http://localhost:8282<%= request.getContextPath() %>/update.do">update</a>
	
	<a href="http://localhost:8282${pageContext.request.contextPath}/select.do">select</a>
	
	<a href="${pageContext.request.contextPath}/delete.do">delete</a>

절대 경로로도 적어줄 수 있고, 상대 경로로도 적어줄 수 있다.
그 중 가장 많이 쓰이는 것은 위 보기 중 세 번째, EL을 활용한 상대 경로이다.

---

1) <a href="/insert.do">insert</a>

-> 요청된 리소스 [/insert.do]은(는) 가용하지 않습니다.

해당 방식처럼 적어줄 땐 /을 빼고 

2) <a href="insert.do">insert</a>

이렇게 적어줘야 한다. 

1)의 경우에는, jsp가 링크를 만들 때 contextPath를 써주지 않는다. http://localhost:8282/insert.do 

2)의 경우에는, jsp가 링크를 만들 때 contextPath를 다 써준다. http://localhost:8282/jsp_ss_front/insert.do 


1)에서 발생하는 오류 때문에, 개발자들이 1)을 사용할 땐 EL을 통해 contextPath를 적어준다는 것.

---

절대 경로 : 위치가 처음부터 나열되어 있는 경로 
- 표시 기준 : 처음부터 나열

상대 경로 : 현재 호출 위치에서 나열되어 있는 경로 
- 표시 기준 : 자기 자신
- ./ : 자기 폴더
- ../ : 상위 폴더

---

FrontController 패턴
- 요청을 한 곳에 모아서 처리
- 유지 보수가 좋음
@WebServlet("*.do")

---

Command 패턴
- 서블릿이 직접 작업을 처리하지 않고, 해당 클래스가 처리하게 함
- 해당 클래스의 경우, 인터페이스를 기반으로 구현하는 경우가 대다수이다.
- 해당 상황의 인터페이스명에는 보통 service나 command가 붙는다.
- 현업에서 100% 이 방식으로 구현한다고 함.

---

현업에서 Ctrl C Ctrl V를 최대한 하게 되는 이유는 
이미 짜여져 있기 때문이다.

---

모든 프레임워크는 기본적으로 MVC 모델로 설계되어 있다.

---

view가 어떻게 코딩상으로 구현이 되는 건지 확인하게 될 것이다.

---

jsp로 직접 연결시키는 방식
- 보안상 문제
- jsp 개수가 엄청나게 늘어날 수밖에 없다. -> 유지 보수가 제대로 될 수 없음
-> MVC 패턴의 필요성

---

		// 서블릿 파일에서 jsp로 forwarding 하는 구문
		RequestDispatcher dispatcher = request.getRequestDispatcher("/show.jsp");
		dispatcher.forward(request, response);

---

tomcat은 프로젝트를 contextPath로 저장.
- 개발자들에게 4개의 영역 제공(pageContext, request, session, application)
- jsp/servlet 방식으로 프로그래밍해야 한다.
- jsp도 컴파일 시 servlet 파일로 변한다. 

---

EL에서는 4개의 영역을 일컫는 객체를 가져오지 않아도, 해당 객체 내 변수를 호출할 수 있도록 프로그래밍되어있다.
해당 변수를 찾을 땐 page, request, session, application 순으로 찾아낸다. 이는 범위 순서로 봐도 무방.

---

forward의 특징 - 요청, 응답 객체가 유지된다. 
-> 요청을 다른 자원으로 이동시킬 때 사용할 수 있다.

--- 



