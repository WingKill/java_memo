20240424SpringSecurity Customizing2

---

패스워드 암호화

---

패스워드를 까먹었다.
- 본인인증 후 패스워드를 새로 설정하라고 함.
-> 기존 패스워드를 알려주지 않는다는 소리

---

Authentication(인증 객체)
- 기존에는 session 영역에 있는 데이터를 꺼내와서 model에 전달하는 과정이 필요하다
- jsp에서 태그 라이브러리를 사용하면, 해당과정 필요없이 진행하겠다는 의미
 
---

- isAnonymous() : 익명 상태인 경우(로그인 OFF)
```
	<sec:authorize access="isAnonymous()">
		<p><a href='<c:url value="/login" />'>로그인</a></p>
	</sec:authorize>
```
- isAuthenticated() : 인증된 상태인 경우(로그인 ON)
```
	<sec:authorize access="isAuthenticated()">
		<sec:authentication property="principal.username"/>님 환영합니다.
	</sec:authorize>
```

---

로그인 정보를 체크하는 방법
- Principal principal 객체를 갖고 오기
```
	   if(principal != null) {
		   System.out.println("타입 정보 : " + principal.getClass());
		   System.out.println("ID 정보 : " + principal.getName());
	   }
```
- Authentication authentication 객체를 갖고 오기
```
	   if(authentication != null) {
		   System.out.println("타입 정보 : " + authentication.getClass());
		   UserDetails user = (UserDetails) authentication.getPrincipal();
		   System.out.println("아이디 : " + user.getUsername());
		   System.out.println("패스워드 : " + user.getPassword());
		   System.out.println("권한들 : " + user.getAuthorities());
	   }
```
- SecurityContextHolder 를 바로 가져오기 
```
	   UserDetails user = (UserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	   if(user != null) {
		   System.out.println("아이디 : " + user.getUsername());
		   System.out.println("패스워드 : " + user.getPassword());
		   System.out.println("권한들 : " + user.getAuthorities());
	   }
```

---

기존 로그인이 안 되던 문제는, UserDetailsVO 설정을 모두 true로 바꾸지 않아서 생긴 문제. 
+
해당 객체 내에서, 권한에 값을 부여하지 않는 상황이었음. 

---

로그인 정보를 체크하는 상황에서 하지 말아야 할 것
```
model.addAttribute("principal",principal);
```
- 이미 테이블 형태로 다 존재하는 상황인데, 굳이 할 필요가 없는 것.
- <sec> 태그가 이미 존재하고, 해당 태그를 통해 가져오면 그만인데 굳이 넘길 필요가 없...

---

남의 소스코드를 함부로 건들면 안됨
- 책임져야 할 수 있음...
- 물론, 로직때문에 어쩔 수 없이 수정하는 거라면 상관이 없음. 단지, 권장 방법이 아니라서 수정하는 건 하지 말자...

---

개발자들은 UserDetails를 활용하여 필요한 것을 많이 집어넣는다.
- 쇼핑몰에서 오늘의 담아두기 목록을 보여준다거나 할 때...

---

userDetails를 구현한 클래스는 Spring Security에서 principal로 올려준다.

---

userDetails를 구현한 클래스에 객체를 넣어주는 이유
- 로그인한 유저(인증된 대상)에 한정하여 해당 기능을 제공하는 것
- session에 저장되어 있으니까, 세션 유지 시간동안에만 필요한 기능들을 제공.
- 해당 방법을 모른다면 기존처럼 Mapper.xml과 인터페이스를 시작으로 하여 구현해야 한다.

---

Spring Security 가 하는 역할
- 보안 = 인증 + 권한 : 로그인 + 리소스 접근 권한
- 암호화 모듈 제공(아무나 짤수도 없고, 구매해서 사용하려면 상당히 큰 금액을 지불해야 함)
- CSRF, XSS, 디도스 등을 막음(외부의 공격 방법이 먹히지 않도록 방어)
	- 디도스는 서버 단에서 막아내는 것.
	- CSRF, XSS의 공격 방법에 대해서는 확실히 알아야 함(알아야 막을 수 있음)

---

암호화
- 어떠한 형태로든, 원본을 기본적으로 바꾸는 것
- 수학적인 특정한 알고리즘에 의해서 진행(법칙이 있다)

암호화 모듈과 hash의 차이
- 암호화 모듈은 복호화가 가능, hash는 복호화 불가

```
- 암호화 모듈(Encryption):
	- 암호화 모듈은 평문(원본 데이터)을 암호화하여 암호화된 데이터(암호문)를 생성하는 과정입니다.
	- 암호화된 데이터는 원본 데이터를 알고 있는 특정한 키를 사용하여 암호화되며, 이 키를 이용하여 복호화하여 원본 데이터를 복원할 수 있습니다.
	- 대표적인 알고리즘으로는 AES, RSA, DES 등이 있습니다.
	- 암호화는 주로 데이터의 기밀성을 보호하기 위해 사용됩니다.
- 해시(Hashing):
	- 해시는 임의의 길이의 데이터를 고정된 길이의 값으로 변환하는 과정입니다. 이렇게 변환된 값은 해시 값 또는 해시 코드라고 합니다.
	- 동일한 입력값은 항상 동일한 해시 값을 생성하며, 해시 함수는 입력값에 대해 일관된 결과를 제공합니다.
	- 해시 함수는 일방향 함수이므로, 해시 값을 통해 원본 데이터를 역으로 복원할 수 없습니다.
	- 대표적인 해시 함수로는 SHA-256, MD5, SHA-1 등이 있습니다.
	- 해시는 데이터의 무결성을 확인하거나 비밀번호의 안전한 저장을 위해 사용됩니다.
```

복호화란? 
- 암호화된 데이터를 이전 데이터로 바꾸는 것 

---

Spring Security에서 제공해주는 암호화 객체
```
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
```
- Spring Security 암호화 객체는 일반적으로 해시 함수를 기반. 즉, 해시 모듈이라고 보면 된다. 
(PasswordEncoder라는 인터페이스를 이용해 암호가 안전하게 저장될 수 있도록 암호의 단방향 변환을 지원.)
	- 사용자의 입력 패스워드는 이 알고리즘을 사용하여 해시 값으로 변환되어 저장됨
	- 인증 시에는 입력된 패스워드를 다시 해시하여 저장된 해시 값과 비교
	-> 대다수의 웹사이트에서, 기존 비밀번호 형태를 알려주지 않는 이유는 이런 이유 때문이다.
	-> 원본 데이터는 이미 해시 코드 기반으로 변형이 이루어진 상태이므로...

- 널리 알려진 암호화 모듈과는 다른 점 : 해시 모듈이라는 점.

---

Spring Security에서 제공하는 암호화 변형 방식으로는 여러 가지 있다. 
	- BCryptPasswordEncoder, Argon2PasswordEncoder, Pbkdf2PasswordEncoder, SCryptPasswordEncoder 등
	- 현업에서는 한 가지를 딱 정하고, 그것만 쓴다. 
	-> 일치 여부를 따질 때 에러가 생길 수 있기 때문에 하나의 방식으로 통일하는 것.

---

모든 암호화 모듈에는 2가지를 구현해놓는다.
- encode : 암호화
- match : 기존에 암호화된 데이터와, 입력된 값을 암호화한 데이터와 동일한지 체크하는 것.(복호화가 아니다. X)
	- 첫 매개변수는 입력된 값으로서, 암호화를 진행할 데이터 1
	- 두번째 매개변수는 이전에 데이터화했던, 이전에 암호화가 진행됐던 데이터 2
	-> 데이터1의 암호화 진행 후 그 결과가 데이터2와 일치하는지 체크
```
passwordEncoder.matches("admin2", user.getPassword())
```	

---

