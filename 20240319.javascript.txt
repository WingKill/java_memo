20240319 javascript
- 내장함수
- 
---

내장함수 
- 자바스크립트에서 자체적으로 제공하는 함수.
-> 개발자가 만들지 않아도 됨.
- 내장 객체에 있는 함수라고 보면 된다.

- alert()
- console.log()
- setTimeout() : 일정 시간, 실행할 함수 설정하여 일정 시간 후 함수를 실행
- clearTimeout() : 세팅된 timeout 함수가 실행되지 않도록 지움.
- setInterval() : 일정 시간, 실행할 함수 설정하여 일정 시간마다 함수를 실행
- clearInterval() : 세팅된 interval 함수가 실행되지 않도록 지움.
- eval() : 문자열을 코드로 이용. 문자열을 입력하면, 해당 문자열을 소스코드로 인식하고 이를 실행한다.
	-> eval의 경우에는 해커들의 악용 여지가 크기 때문에, 회사 내규로 사용 금지시키는 경우가 많다.
	- 문자열이 노출된다고 한다.

---

timeout과 interval은 아래와 같이 주로 쓰인다고 한다.
```javascript
    function endFunction(){
        clearInterval(printIntervalId);
        console.log("종료");
    }

    var printTimeOutId = setTimeout(endFunction,7000);

    var printIntervalId = setInterval(function(){
        console.log("*");
    }, 2000);
```

---

new Date() 
- 현재 시간을 알 수 있는 함수(생성자함수)

```javascript
    function nowDateTimeCall(){
        var date = new Date();
        var hour = date.getHours();
        var minute = date.getMinutes();
        var second = date.getSeconds();

        // document.write("현재 시각은 "+ date.getHours() + "시 " + date.getMinutes() + "분 " + date.getSeconds() + "초입니다. " + "<br>");
        // location.reload();
        document.body.innerHTML = "현재 시각은 "+ hour + "시 " + minute + "분 " + second + "초입니다. " + "<br>";
    }
    
    var nowDate = setInterval(nowDateTimeCall, 1000);
```

---

객체
- 자바스크립트의 객체는 준괄호로 표현

---

데이터 타입을 알수 있는 명령어 : typeof 

---

객체는 자바와 표현방식이 다르다.
- 객체 안에서의 변수 선언은 key, value 형태. 
-> property로 표현.

```javascript
        var objData = {
            num : 123,
            str : "abc"
        }
```

---

함수는 다시말하자면, 함수명만으로 호출하면 소스 코드를 노출하고 함수형태로 호출하면 실행 결과를 가져온다.

---

자바스크립트의 객체는 클래스가 아니다.
- 클래스가 객체를 찍어낼 수 있는 틀의 역할을 한다는 개념은 동일하다.
-> 그런 의미에서 클래스가 아니라는 의미.

- 객체 내 함수는 익명함수의 형태로 구현하면 된다.

---

형변환을 항상 고려하자. 
- 함수형도 데이터 타입이다.
-> 숫자형처럼 연산시키려면... 당연히 형변환이 필요하지 않겠는가

---

자바스크립트의 this 개념
- 객체 내부를 가리키는 키워드. 
- 객체 내부의 속성을 이용할 때 반드시 명시해야 함.

---

json - javascript 객체 형태.

---

객체에서 값을 꺼내오는 방법
- 객체 내 변수 직접 접근
- 배열처럼 접근
- for문을 통한 접근

```javascript
        /* 객체 접근 */
        var objNation = {
            nation : "Korea",
            capital : "Seoul",
            language : "hangeul",
            population : 5100000000,
        }

        document.write(objNation.nation + "<br>");
        document.write(objNation["nation"] + "<br>");

        var print = "";
        for(var key in objNation){
            print = print + key + " : " + objNation[key] + "\n";
        }
        document.write(print + "<br>");
```

---

자바스크립트 
-> 보안에 굉장히 취약.

---

객체에서는 속성을 추가하고 삭제할 수 있다.
- 속성 추가는, 기존에 없는 속성을 선언 및 값을 할당하면 된다.
- 삭제는 delete 키워드를 이용한다.

```javascript
        var person = {
            name : "Hong Gil Dong",
            nation : "Korea",
            gender : "men",
            character : "good",
        };

        // 속성 추가
        person.talent = "fencing";
        print = "";

        for(var key in person){
            print = print + key + " : " + person[key] + "\n";
        }

        document.write(print + "<br>");

        // 속성 삭제
        delete person.talent;
        print = "";

        for(var key in person){
            print = print + key + " : " + person[key] + "\n";
        }

        document.write(print + "<br>");
```

---

챗 gpt 참조한 사항

- JavaScript에서도 HTML 요소를 선택하고 조작할 때 id나 class를 활용할 수 있습니다. 이를 통해 원하는 요소에 직접적으로 접근하여 조작할 수 있습니다.

id를 활용한 요소 선택:

특정 id를 가진 HTML 요소를 선택할 때는 document.getElementById() 메서드를 사용합니다. 이 메서드는 해당 id를 가진 첫 번째 요소를 반환합니다.

예를 들어, id가 "myElement"인 요소를 선택하려면 다음과 같이 사용합니다:

```javascript
Copy code
var element = document.getElementById("myElement");
```
class를 활용한 요소 선택:

특정 class를 가진 HTML 요소를 선택할 때는 document.getElementsByClassName() 메서드나 document.querySelectorAll() 메서드를 사용합니다. getElementsByClassName()은 해당 class를 가진 모든 요소를 반환하고, querySelectorAll()은 CSS 선택자를 사용하여 요소를 선택합니다.

예를 들어, class가 "myClass"인 요소들을 선택하려면 다음과 같이 사용합니다:

```javascript
Copy code
var elements = document.getElementsByClassName("myClass");
// 또는
var elements = document.querySelectorAll(".myClass");
```
이러한 메서드들을 사용하여 JavaScript에서 HTML 요소를 선택하고 조작할 수 있습니다. 요소를 선택한 후에는 해당 요소의 속성이나 내용을 변경하거나 이벤트를 추가하는 등 다양한 작업을 수행할 수 있습니다.

---

in 
- 객체 내 멤버가 있는지 확인할 수 있는 키워드
- 또는 객체 내 멤버를 활용하고자 할 때 사용.


with
- 객체 내 멤버에 바로 접근가능하도록 하는 키워드
- 객체 내 멤버에 접근하려면 객체.멤버 형식으로 접근해야 하지만 
with로 묶은 객체엔 바로 멤버명만 적어도 접근이 가능.
```javascript
        with(person){
            document.write(name + "<br>");
            document.write(nation + "<br>");
        }
```

---

저 모든 특징은, 모든 데이터들이 분명 값은 객체가 아닐지언정 선언된 것들은 객체로 저장되니까...
그래서 할 수 있는 게 아닌가 싶다.

---

자바스크립트 
- 프로토타입 언어
-> 속성 추가 및 삭제가 가능하다.

---

객체를 만드는 방법
- 변수에 값으로 객체를 할당
-> 변수명 = { 속성명1 = 속성명1값, ... }

- 함수를 이용한 객체 생성 : 현업에서 자주 해당 방식으로 구현
-> 함수 내부에서 객체를 구현하고 해당 객체를 리턴.

- 또 다른 함수를 이용한 객체 생성 : 객체를 리턴하는 익명 함수를 만든다.
```javascript
        var calculator = function(){
            function add(x,y){
                return x + y;
            };

            function sub(x,y){
                return x - y;
            };

            return {
                add : add,
                sub : sub,
            };
        };

        console.log(typeof calculator);
	// 이 부분이 중요하다.
        var add = calculator().add(1,2);
	//
        console.log(add);
```
-> function의 리턴값을 받아 생성된 객체의 프로퍼티를 호출하여 실행.
-> calculator는 함수형이므로 함수형태로 호출하여야 한다.

- 그런데 난 calculator.add() 이런 식으로 호출하고 싶은데?
-> 함수를 만들자마자 실행하는 구문이 필요.
```javascript
	// 함수를 만들자마자 즉시 실행함으로서, calculator는 function이 아니라 object가 된다.
        var calculator = (function(){
            function add(x,y){
                return x + y;
            };

            function sub(x,y){
                return x - y;
            };

            return {
                add : add,
                sub : sub,
            };
        })();

        console.log(typeof calculator);
	// 위에서 달라진 부분으로 인해 해당 방식이 가능. 
        var add = calculator.add(1,2);
	//
        console.log(add);
```

---

- 함수를 괄호로 묶고, ()를 더 써준다.
-> 함수를 만들자마자 실행하는 구문이 된다.
```javascript
(function a(){

})()	
```

---

