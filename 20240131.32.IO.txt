20240131 32. I/O 스트림

---
프로그램의 상당 부분은 다음 대상들의 입출력과 관련이 있다. 
그리고 이들에 대한 자바의 입출력 방식을 가리켜 I/O 모델이라 한다. 
- 파일
- 키보드와 모니터
- 그래픽카드, 사운드카드
- 프린터, 팩스와 같은 출력장치
- 인터넷으로 연결되어 있는 서버 또는 클라이언트
--- 
stream : 개울(골짜기나 들에 흐르는 작은 물줄기)
- 자바에서의 stream : 데이터의 흐름
- 스트림(Stream)은 자바 8부터 추가된 기능으로, 컬렉션을 함수형 프로그래밍 스타일로 다룰 수 있도록 지원하는 API
I/O 스트림(Input/Output Stream)은 데이터를 입출력하기 위한 자바의 기본적인 수단
- 초기 버전부터 지원
---
입력 스트림(input stream) : 실행 중인 자바 프로그램으로 데이터를 읽어 들이는 스트림
출력 스트림(output stream) : 실행 중인 자바 프로그램으로부터 데이터를 내보내는 스트림
---
```
import java.io.FileOutputStream;
import java.io.OutputStream;

public class IOMain {
	public static void main(String[] args) throws Exception {
		OutputStream out = new FileOutputStream("data.dat");
		out.write(7);
		out.close();
	}
}
```
---
---
OutputStream : 파일에 데이터를 보내는 연결통로를 생성하는 클래스.
InputStream : 파일에서 데이터를 가져오는 연결통로를 생성하는 클래스.
- 해당 연결통로를 정리하는 close()를 실행시켜줘야 한다.
---
해당 stream을 구현한 클래스에는 IOException처리를 하도록 강제하고 있으므로,
메인 메서드에 throws Exception를 하거나
try catch문을 사용하는데, 첫 번째 방법은 학습을 위해 사용할 뿐 현업에서는 두번째 방식으로 사용한다.
---
```
		OutputStream out = null;

		try {
			out = new FileOutputStream("data.dat");
			out.write(7);
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			if( out !=null)
				try {
					out.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
		}
```
---
위와 같은 코딩 방식이 기본적인 구현 방식이다.
코드가 많이 늘어나기 때문에, 요구에 맞춰 자바 1.7부터는 try with resource 문법을 제공하기 시작했다.
```
try(OutputStream out = new FileOutputStream("data.dat")){
			out.write(7);
		}catch (Exception e) {
			e.printStackTrace();
		}
```
---
기본적으로, sts 자바 프로젝트에서 파일 입출력은 프로젝트 내의 파일을 기준으로 잡는다.
project 우클릭 - show in - System Explorer - 해당 프로젝트 폴더 더블 클릭
이후 나오는 화면 내 파일이 기준이다.
---
public int read(byte[] b) throws IOException
  → 파일에 저장된 데이터를 b로 전달된 배열에 저장
public void write(byte[] b, int off, int len) throws IOException
  → b로 전달된 배열의 데이터를 인덱스 off에서부터 len 바이트만큼 파일에 저장
---
자바 내 거의 모든 프로그램이 내부적으로 들어가는 원리
- FileOutputStream : 통로 연결과 동시에 메모리 할당
- 데이터를 읽어들이기 위해 index 혹은 커서를 가진다.
- 개발자가 read를 호출하게 되면, 8개를 읽고 호출하는 것.
-> 이후 커서는 9번째에 머물러 있다.
---
byte[]를 넘긴다는 것.
- 해당 용량은 단위가 된다.
- 해당 용량만큼 메모리에 저장한다.
- 데이터가 용량보다 적을 경우, 해당 데이터 크기만큼만 파일에 저장한다. 
--- 
필터 스트림 : 속도를 향상시키기 위해, 기본 스트림에 추가로 달게 되는 스트림.(보조 스트림이라고도 한다.)
예시로, int형 데이터 하나를 읽는다면
• 단계 1: 파일로부터 1바이트 데이터 4개를 읽어 들인다.
• 단계 2: 읽어 들인 1바이트 데이터 4개를 하나의 int형 데이터로 조합한다.
단계 2가 필터 스트림의 역할이라고 보면 된다.
---
기본적인 IO 스트림 객체 이름은 소켓이냐, 파일이냐에 따라 Socket, File 등으로 나뉜다.
---
BufferedInputStream, BufferedOutputStream
- 실무에서 항상 쓰는 메서드 중 하나
- 버퍼링 기능을 제공하는 필터 스트림이다.
---
버퍼링이 무엇인가?
- 미리 데이터를 모아두는 것.
- 버퍼링을 두지 않으면, 실시간으로 다운로드하다가 환경이 안좋아지면 바로 끊겨버리는 상황이 발생할 것.
- pulling은 정상적으로 진행하되, 한 곳에서는 미리 모아두는 작업을 실행하는 것.
- 데이터를 일시적으로 저장한 후에 한 번에 입출력 작업을 수행한다고 보면 된다.
- 미사용할 때보다 훨씬 속도가 빨라진다.
- queue의 가장 대표적인 사용 예시이다.
---
필터 스트림(보조 스트림)은 여러 개를 연결해서 써도 상관이 없다.
---
바이트 스트림 
- default로 8bit(1byte)씩 읽어들어가는 스트림이라서 바이트 스트림이라 한다.
---
문자 스트림
- 바이너리 파일(.class, .exe 파일 등)과 문자 파일은 다르다. 
- 문자 파일 : ASCII Code를 사용하여 문자를 저장.
- 문자는 숫자와 1:1 매칭이다. 이렇게 할 수밖에 없기 때문에 이렇게 매칭시킨 것이라고.
- 문자 하나를 나타내는 자바 char의 데이터는 2byte이다.
- 이를 좀 더 편리하게 읽어들이기 위해서 사용하는 것이 문자 스트림이다.
- OS 간 표준 규격애 따라, 파일을 변환하는 스트림이라고 보면 되겠다.
---
- 프로그래밍 언어에서는 유니코드로 문자를 표현
- Window에서는 CP949로 하는 등 다른 OS에서의 문자 표현 방식은 다 다르다. 
- 1960년도에 ASCII Code로 매칭시켜놨음.
- 시대가 지남에 따라, 한국어나 중국어 등 타국 언어들을 매칭시키는 것이 필요해짐.
- 이후로 다양한 규격이 생겨났다.
---
- 현업에서 고생하는 이유는 배경 지식이 부족해서 그런 것이다.
-> 배경 지식을 쌓는데 주저하진 마라.
---
ASCII Code 
'A' : 65, 'a' : 97, ' ' : 32
---
문자 인코딩 방식이 여러 개가 생겨난 이유
(예시) 한글)
- 한글과 컴퓨터를 만들 당시, 한글 인코딩 표준 방식이 없었다고.
- 표준 방식이 없으니, 인코딩 방식에 따라 글자가 깨진 것처럼 출력되는 상황이 나왔다고.
---
- 웹 브라우저 회사들이 인코딩 표준 방식으로 유니코드(UTF-8)를 선택하고, 해당 방식으로 통일하기 시작.
- 이후로 영어 외 글자도 깨지지 않게 됨.
---
문자 인코딩 규격 - Mapping 방식으로 만들게 된다고.
---
url에 get 방식으로 넣은 한글이 깨지는 것 : 상당히 자주 겪게 되는 에러사항인가보다..
---
선생님은 싱가포르 강추하는 중. 중국은 비추 중.
---
- Reader 	문자 입력 스트림의 상위 클래스
- Writer 	문자 출력 스트림의 상위 클래스
---
한글이 깨진 상태로 나오는 경우에는 보통 sts 문제인 경우가 대다수이므로,
sts의 encoding setting을 확인해보자. preference - encoding 검색
---
파일 읽을 때 경로를 지정해줘도 상관없다.
---
문자 스트림에도 버퍼링을 지원하는 클래스가 있다.
---
개행조차도 os 별로 다르기 때문에, 
프로그래밍에서는 직접 값을 대입하는 것보다 제공하는 함수를 활용하는 것이 좋다.
---
ctrl shift o : 해당 영역의 클래스 import
---
