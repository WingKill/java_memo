20240320 javascript_object

---

객체를 생성하는 방법
- 생성자 함수를 이용하여 만든다.

- 함수를 호출하는 방식
	- 일반 함수 호출 
	-> function 데이터 타입
	- new 키워드를 통한 함수 호출
	-> object 데이터 타입을 반환

-> new 를 붙이면 object 데이터 타입을 반환 

- 일반 함수 내부 형태와 생성자 함수의 내부 형태는 다르다.

참조 링크 
- https://ko.javascript.info/constructor-new

---

생성자 함수 관례 2가지
- 함수 이름의 첫 글자는 대문자로 시작한다.
- 반드시 new 연산자를 붙여 실행한다.

---

자바스크립트에서의 객체
- 속성(property) + 함수(method)
- 속성의 경우 this를 통해 정의한다.

this 키워드의 의미 
- 객체 내부를 지칭하는 의미 : 객체 내에서 사용될 경우
- 함수 내에서 만들어지는 빈 객체 : 생성자 함수 내에서 사용될 경우 -> 빈 객체 자기 자신을 의미
- closure : 내부 함수에서, 외부의 변수 정보를 기억하는 것. 

---

생성자 함수 내에서 이루어지는 로직

```javascript
        function User(name){
            // this = { }; (빈 객체가 임시적으로 만들어짐)
            // 새로운 프로퍼티를 this에 추가함
            this.name = name;

            // return this; (this가 암시적으로 반환됨)
        }
```

---

자바스크립트 창시자 : 브렌던 아이크(Brendan Eich)

---

자바스크립트 : 프로토타입 언어 

객체에 적용되는 사항.

prototype 
- 공유된 공간 
- 메서드를 prototype이란 공유된 공간에 하나만 생성해서 사용.
- 동일한 기능을 하는 메서드가 적혀있는 객체들을 여러 번 호출하게 되면 동일한 기능의 메서드가 계속 생성되는 상황 발생.
-> 동일한 기능의 메서드가 메모리를 차지하는 상황을 방지하기 위한 개념

메모리 절약을 위해, 공유하기 위해 만든 개념이라는 점에서는 java의 static 키워드와 비슷한 게 아닌가...
- 한번 메모리에 올려서 공유하여 사용하는 개념
- 물론, java의 상속이란 개념에 비유할 수도 있겠다.

---

tofixed(number)
- 고정 소수점 표현법
- 소수점 number번째 자리까지 표현. 
- 소수점 자리수가 더 많은 경우에는 반올림으로 표현.

---

setters and getters
- 내부 property 보호하기
- 유효성 검사에 사용할 수 있음.(함수 내 조건문을 넣고 활용함으로써)

---

내장 객체 1
- String
	- 자바에서처럼 문자열 넣는 방법을 2가지 제공한다.
		- 자바스크립트에서는 두 표현방식의 차이점은 표현방식의 차이일 뿐, 저장영역이 동일하다.
	- 제공 함수
		- charAt() : 길이
		- indexOf() : 문자열 내 문자의 인덱스
		- lastIndexOf() : 문자열 내 문자의 인덱스
		- concat() : 문자열 더하기
		- replace() : 특정 문자열 교체(대소문자 교체에도 사용)
		- split() : 해당 단어를 기점으로 배열로 나누는 것. 
		- slice() : 문자열을 빼내는 것. (범위 : slice(시작 인덱스, 끝 인덱스) = 시작 인덱스 <= 문자열 < 끝 인덱스)
		- toLowerCase() : 모두 소문자로 바꾸기
		- toUpperCase() : 모두 대문자로 바꾸기
		... 등 여러 가지가 있다.
	- 기본적으로 불변 객체이다. 
	-> 원본은 바뀌지 않는다. 

---

불변
- 원본 유지 

가변
- 원본 바뀌는 것

---

자바스크립트에서는 문자열 비교 시 ==을 사용할 수 있다.
자바는 equal()을 사용해야 한다. 
	- ==을 하게 되면, 객체끼리의 비교인 만큼 객체의 주소값을 비교하니까. 
	-> 값을 비교하기 위해 메서드를 쓰는 것.

---

자바스크립트엔 ==, ===가 있다.
	- == : 값 비교
	- === : 값, 데이터 타입 비교

---

내장 객체 2
- Math
	- 제공 함수
		- pow(a,b) : a의 b제곱
		- ceil(a) : a 올림
		- floor(a) : a 내림
		- rount(a) : a 반올림
		- sqrt(a) : 루트 a - a의 제곱근
		... 등

---

자바스크립트 - ES6 문법 정리(중요)
https://luckyguystory.tistory.com/101

---

내장 객체3
- Date
	- 제공함수들 중
		- getMonth() : 인덱스 값을 리턴하는 것 같다. 현재 월과 맞추려면 +1을 해줘야 한다.
		- getDay() : 요일 기준으로 숫자값을 리턴. ex) 수요일이면 3을 리턴
		- getDate() : 날짜 리턴. 

---

자바에서의 배열 초기화 :  {}, 
자바스크립트에서의 배열 초기화 : []

---