20240402 Spring-DI-java와_xml의_차이점

---

```
String configLocation = "classpath:appCTX.xml";
AbstractApplicationContext ctx = new GenericXmlApplicationContext(configLocation);
```

```
AbstractApplicationContext ctx = new AnnotationConfigApplicationContext(ApplicationConfig.class);
```



---

annotation 
- 기능이 추가 : 함수
- 프로그래밍하는 방법이 있음 : 함수를 만드는 것
-> 기존 문법을 무시하게 된다.
- 조건에 따라 변수, 메서드, 클래스에 다 붙을 수 있음.


강사 생활 전, 20년 프로그래머 생활하는 동안 자바로 annotation 프로그래밍을 한적은 없다고.
- 웬만하면 만들 일이 없다는 의미.
- 프레임워크를 짠다고 했을 때, 만들라면 만들어야 한다고 함.
-> 웬만한 프로젝트에서는 annotation을 만들 일이 없다는 걸 의미하기도 함.

---

@Configuration // @Component + 설정 의미
// html의 시멘틱 태그를 생각하면 된다. (nav = (div + 메뉴))

- Spring에서 제공하는 annotation 중 하나
- 설정 파일이라는 것을 알려주는 것
- Indicates that a class declares one or more @Bean methods and may be processedby the Spring container to generate bean definitions and service requests for thosebeans at runtime
(하나 이상의 @Bean 메서드를 선언하는 클래스를 나타내며, 런타임에서 스프링 컨테이너가 이러한 빈에 대한 빈 정의와 서비스 요청을 생성할 수 있다)

@Component 
- new 
- 즉, 객체를 생성하라는 의미


@bean
- bean을 생성
- spring에 의해 관리되는 bean을 생성하는 함수
- .xml에서 bean 태그를 통해 생성하는 bean과 거의 유사하다고 함

---

annotation에 마우스를 올려놓으면 해당 annotation에 대한 설명이 영문으로 출력된다.
이를 통해, 해당 annotation의 기능에 대해 알 수 있다.

---

xml와 java를 같이 사용 

1. xml 설정 파일에 java 설정 파일을 가져와 사용하는 방법
```
<context:annotation-config />
<bean class="edu.sejong.ex.ApplicationConfig2" />
```
-> annotation을 이용한 설정 파일을 읽어들인다.
-> 해당 설정 파일을 bean 객체로 만드는 것.

2. java 설정 파일에 xml 설정 파일을 가져와 사용하는 방법
```
@ImportResource("classpath:appCTX.xml")
```
---

@Component 
- new 
- 즉, 객체를 생성하라는 의미
- 외워주는 게 좋다.
- class 명 위에 붙는 annotation이다. 해당 클래스명으로 객체를 생성하라는 의미이다.

---

```
		GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();
		
		ctx.load("classpath:appCTX.xml");
		ctx.refresh();
		
		Student student2 = (Student)ctx.getBean("student2");
		
		System.out.println("이름 : " + student2.getName());
		System.out.println("나이 : " + student2.getAge());
		System.out.println("취미 : " + student2.getHobbys());
		System.out.println("신장 : " + student2.getHeight());
		System.out.println("몸무게 : " + student2.getWeight());
		
		ctx.close();
```

- 생성
- 설정
	load() : appCTX.xml 설정 불러오기
	refresh() : load() 이후 initializing 하는 것. 초기화하는 것.
- 사용
- 종료

---

생명주기(life cycle)

---

- 대다수의 프레임워크가 생명 주기 방식을 제공하고 있음

---

```
		GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();
		
		ctx.load("classpath:appCTX.xml");
		ctx.refresh();
				
		ctx.close();
```

- load()는 파일을 읽어들이는 과정
- refresh()는 초기화 즉, 파일을 해석해나가는 단계를 일컫는다.

---

- Spring에서 생성된 빈 객체의 생명 주기
	- refresh()될 때 생성된다.
	- close()될 때 소멸된다.
- 해당 부분을 확인 및 컨트롤하는 방법1
	- 빈 객체에 해당되는 클래스가 특정 인터페이스를 상속해야 한다.
```
public class Student implements InitializingBean, DisposableBean{

}
```
	구현하게 되는 함수는 다음과 같다. 해당 함수 내 내용을 설정하면, 생명 주기 컨트롤을 하게 되는 것.
```
	public void destroy() throws Exception {
		System.out.println("destroy() ..");
	}

	public void afterPropertiesSet() throws Exception {
		System.out.println("afterPropertiesSet() ..");
	}
```

- 해당 부분을 확인 및 컨트롤하는 방법2
	- @PostConstruct, @PreDestroy
	- 1.6버전에서는 되지만, java11버전에서는 @PostConstruct가 비활성화 및 사라진 상태인 거 같다. 
	-> 결국 자바 11버전 기준으로는 인터페이스 상속으로만 생명주기 관리를 해야 하는 상황.

---

- Spring bean의 범위
	- prototype
	- request
	- session
	- singleton

- default로 singleton가 설정되어 있음

- prototype 
	- 계속해서 객체를 생성해 나간다.
- singleton
	- 객체 하나를 계속 활용한다.

---

지금까지 한 활동
- IOC 컨테이너가 어떻게 생겼는가
- 객체를 어떻게 꺼내서 사용하는가

---

웹 프로그래밍 개발 방법
1. socket 개발 방식
2. servlet/jsp 개발 방식
	- 처음 대다수 프로젝트가 위와 같이 개발됨
3. spring/mvc  / ejb 
	- 북미권에서는 아직도 ejb를 활용한 프로젝트가 많아 이를 많이 쓰기도 한다고.
	- 돈 되는 회사(은행권, 네카라쿠베 등)의 100%는 spring/mvc를 사용하게 되었다고.
	- 2002년부터 쭉 쓰이기 시작함
	-> 벌써 2024년...... 20여년동안 많이 쓰이고 있음
	- 업데이트를 상당히 빠르게 진행하고 있다.
	- 3버전, 4버전, 5버전으로 주요 분기가 나뉜다고 한다.

---

공공기관은 아직까지 3버전 기반이 많다.
- 오랫동안 spring/mvc를 다루신 분들은 버전에 따라 맞춰서 진행한다.

- 아는 척 하는 사람들은 무조건 신입이라고...(ㅋㅋ)
	
- 개발자들은 무조건, 월급 인상은 없고 일거리가 몰려버리면 무조건 옮겨버린다.

---

Spring webprogramming 방식 
- 스프링 레거시
	- 현업은 여전히 해당 방식이 대세
	- 아직까지 유지보수해야 하는 프로젝트가 많다.
- 스프링 부트
	- 신규 프로젝트의 경우에는 무조건 레거시보다는 부트로 진행한다.
	- 시작할 경우에는 무조건 스프링 부트로 한다.

- 설정 부분에서만 차이난다.
그 밖의 부분은 100% 똑같다고 한다.

---

Spring 웹 프로그래밍할 땐 코딩이 절반이 아닌, 세팅이 절반이라고.

---

STS 4부터는 Spring legacy가 메뉴에도 없다고...

---

Spring MVC 활용 시 외우게 되는 내부 객체들
- HandlerMapping
- HandlerAdapter
- DispatcherServlet
- View(JSP)
- ViewResolver
- Controller

---

Spring Starter Project
- Spring은 예전부터 maven을 많이 사용해왔고, 안드로이드 시스템 같은 경우에는 default로 gradle을 많이 사용한다.

강사님의 평 : 안드로이드 프레임워크는 너무 개떡...같이 만들었다(얼마나 사용감이 별로인 거지)
	- 알 수 없는 버그들이 있음
	- 캡슐화가 덜 됐다(그대로 가져다 써야 한다...)

---

스프링 개발 언어는 
- java : 옛날부터 사용하던 언어
- kotlin : 스프링이 안드로이드 개발에 자주 쓰이니까 oracle사와 google사 간 소송이 있던 적이 있다.
	- kotlin은 oracle 사와의 마찰을 피하기 위해 google 사에서 만든 언어라고 한다.

물론, 대다수는 java를 사용한다고.
kotlin을 사용하게 될 날이 올지도 모른다. 

---

버전은 상당히 중요한 것
- 팀장이 딱 정해준다.
-> 안정화된 버전을 선택한다. 
- 높은 버전은 그다지 좋아하지 않는다.
-> 알 수 없는 에러가 발생할 수 있기 때문이다.

---

3.2.4버전은 최신버전이라 프로젝트 생성시 에러가 발생하고 있다.
-> 안정화된 다른 버전이 적혀있는 pom.xml의 내용을 가져옴.
-> 프로젝트 우클릭 : maven - update project -> force update of snapshots/releases 체크 후 OK.(현재 프로젝트가 체크됐는지까지 확인한 후 OK를 누른다.)
-> 프로젝트 업데이트가 강제로 진행되면서 프로젝트가 안정화될 것이다...

---

.war로 생성하면 src/main/java에 파일이 2개 생기고, .jar로 생성하면 src/main/java에 파일이 1개 생길 것

---

단순하게 파일을 하나 넣어줬을 뿐이다.
```
package edu.sejong.ex.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController{
	
	@GetMapping("/")
	public String hello() {
		return "Hello World";
	}
}
```

Run As - Spring Boot App 을 클릭하여 실행(실행 방법도 단순히 서버를 그대로 구동하는 것이 아니라는 것...)

---

프레임워크는 해당 문법을 사용하여 