20240327 es6 문법 

---

정적 이벤트보다는, 동적 이벤트 처리를 활용하는 것이 편할 것

---

JavaScript ES6 ( ECMAScript 2015 또는 ECMAScript 6 이라고도 함 )은 2015년에 도입된 최신 버전의 JavaScript. 
ECMAScript 는 JavaScript 프로그래밍 언어가 사용하는 표준

---

var, let, const
- 변수 선언 시 사용하는 키워드들
es6 이전에는 var만 사용했었음. 이후에 let, const가 생김.

---

자바스크립트는 인터프리터 언어
- 컴파일 단계가 없는 언어이기 때문에, 실시간으로 실행하기 전에 에러인지 아닌지 알 수가 없음
- 어쩔 수 없이, 실시간으로 실행하여 에러 여부를 확인해야 한다.

---

const는 상수를 의미
- 한번 초기화하고 나면, 그 이후로 값 할당이 안됨.
- 자바스크립트에서는 const를 많이 쓴다고. 

---

let 이 생긴 이유
- hoisting 때문이라고 한다.

---

hoisting
- 원래 건축/ 건설에서 화물 운반에 사용되는 장비를 일컫는 말.
-> 아래에 위치한 것을 위로 올리는 역할

- 들어올리다.

- 코드에 선언된 변수 및 함수를 코드 상단으로 끌어올리는 것

---

console.log()에 제공되는 문법
- " " (한 칸의 공백 추가)를 , 로 표현한다.
```
console.log("공부하자", study);
```

---

자바스크립트 
- 인터프리터 언어
- 프로토타입 언어

---

var키워드를 통해 변수를 만들 경우, window 객체에 변수를 선언한다고 생각하면 된다.
- if문 안의 study 값을 변경하면 if 밖의 study도 변경된다.
-> hoisting 원리

let으로 생성하면, 변수 영역을 코드 블록 안으로 한정시킬 수 있음.
- let 권장하는 이유

---

전통적인 문자열 연결 : "" + "" + ""
문자열 템플릿 : ` ` (왼쪽 키보드 1번 왼편에 있는 ` ) 를 활용. ${}를 활용한다.
jsp의 el 문법과 유사하기 때문에 문제를 일으킬 수 있다는 점이 단점이다.
-> jsp에서는 하지 말고 전통적으로 문자열 연결하라는 의미..

예시

```
`
${firstname} 님께,

${event} 티켓 ${qty}건을 구매해주셔서 감사합니다.

주문 상세 정보 :
	${lastname} ${firstname} ${middlename}
    ${qty} x $${price} = $${qty*price}	공연 : ${event}
    
공연 30분 전까지 배부처에서 티켓을 수령하시기 바랍니다.
감사합니다 :)

${ticketAgent} 드림
`
```

---

자바스크립트의 함수의 특징
- 파라미터의 개수에 맞추지 않고 호출해도, 호출이 가능.

ES6부터는 함수의 파라미터에 초기값을 설정하는 것이 가능하다.
- 디폴트 파라미터
```
    function greeting(message = "hi"){
      console.log(message);
    }
``` 
해당 함수는, message에 넘어오는 값이 없을 경우 기본적으로 hi로 파라미터의 값이 초기화된다.
이 파라미터를 디폴트 파라미터라 일컫는다.
```
    greeting(); // hi
    greeting("안녕하세요"); // 안녕하세요
```

---

디폴트 파라미터가 객체일 경우 헷갈릴 법한... 요소는
디폴트 파라미터에는 있지만 대입 객체엔 없는 프로퍼티가 있을 경우, 해당 프로퍼티의 값은 디폴트 파라미터의 값이 나오는가? 
-> 당연히 아니다. 대입 객체로 대체된 상태니까 undefined가 나와야지, 값이 나오면 그건 뭔가 잘못된 거지...
의도적으로 함수 내 로직을 그렇게 짠 게 아니라면...

---

화살표 함수

```
    let date = function(){
      return new Date();
    };
```
는 화살표 함수로 표현하면
```
    let date = () => {
      return new Date();
    }
```
이렇다. 
- 개발자들이 화살표 함수를 많이 사용하기 시작했다.

---

자바 11버전부터, var 제공하기 시작.
- 아직 현업에서는 var 사용하는 개발자를 못봤다고.
-> 기존 소스 코드에서 아예 사용하지 않았던 기법이니까...

---

es6 트랜스파일링
- 기본적으로 es6는 웹 브라우저가 지원해야 한다.

- 모든 웹브라우저가 es6를 지원하지는 않고, 지원하더라도 모든 기능을 지원하지 않는 경우가 많다.
-> 브라우저에서 es6 코드를 실행하기 전에 es5로 컴파일한다
-> es6가 제대로 작동하도록 보장 가능
-> 해당 변환 과정을 트랜스파일링이라고 한다.

바꾸는 작업을 바벨이라는 (소프트웨어/라이브러리/패키지)로 진행한다고 한다.

---

구조 분해

구조 분해의 목적 
- 객체나 배열 내 구성요소를 변수화시키기

구조 분해했다면, 원본이 불변이다.
- 원본의 프로퍼티를 변수화할 때, 복사하여 붙여넣는 것이므로 변수의 값을 변경해도 원본 프로퍼티의 값은 변하지 않는다.


1. 객체
- 변수 선언에 객체를 씌우면( {}로 씌우면 ), 객체 내 프로퍼티를 변수화시키겠다는 의미
```
    let sandwich = {
      bread : "플랫 화이트",
      meat : "베이컨",
      topping : ["치즈","상추","칠리소스"],
    }

    // 구조 분해
    let {bread, meat} = sandwich;
    console.log(bread, meat);
```

2. 배열
- 배열은 프로퍼티에 저장되었다기보다는 인덱스에 저장이 되어 있는 형태다.
-> 변수명을 개발자가 만들어줘서 사용.
-> 특정 하나만 골라서 뽑고 싶다면 해당 부분에만 이름을 붙여서 배열을 씌워주면( []로 씌우면) 된다. 

```
    let [first,second] = ["용평","평창","홍천"];
    console.log(first); // 용평
    console.log(second); // 평창
	// 세번째만 뽑고 싶을 경우 활용하는 방식
    let [,,third] = ["용평","평창","홍천"];
```

---

객체 리터럴 개선
- 객체 구조 분해의 반대 과정
```
    let name = "백두산";
    let elevation = 2744;

    let funHike = {name,elevation};
    console.log(funHike); // 객체 정보가 출력됨
```

---

객체 안에 들어가는 함수를 만들 때, 함수 내에 this 키워드를 활용했다면 화살표 함수를 쓰면 안된다.
-> 익명함수 형태로 가지고 있으면, 객체 내에 넣었을 때 this 키워드가 객체를 가리킨다.

-> 화살표 함수 내의 this는 그게 아닌가 보다.

---

스프레드 연산자
- 객체나 배열을 확장하거나 병합하는 데 사용하는 문법
```
    // 스프레드 연산자
    let food = ["닭갈비","닭꼬치","닭강정"];
    let drink = ["소주","맥주"];

    let mix = [...food,...drink];
    console.log(mix);
```
-> 배열 내 ... (점 3개) 스프레드 연산자이다.

- let mix = [food, drink] 와 let mix = [...food,...drink] 의 차이점
-> 전자의 경우에는 food, drink이라는 2개의 값을 가진 배열.
-> 후자는 food의 값 2개와 drink의 값 3개, 총 5개의 값을 가진 배열이 된다.

- 스프레드 연산자는 왜 자주 쓰이는가?
-> 원본 데이터를 불변시키기 위한 것. 가변함수가 꽤 많기 때문.

```
    let [last] = food.reverse();
    console.log(last);
    console.log(food);
```
위 코드에 이어서 확인해보면, 해당 food는 reverse()가 적용된 상태로 출력된다. reverse()가 가변함수이기 때문이다.
그러므로, food의 데이터 상태를 유지하고 싶다면
```
    let [last] = [...food].reverse();
    console.log(last);
    console.log(food);
```
해당 방식으로 진행해야 원본이 유지된다.

-> 이전에 로또 번호 추출하는 작업 과정에서 원본 유지하는 방법을 검색하여 미리 접한 문법 중 하나.
-> 그새 까먹다가 다시 언급되니 기억난다.

---

