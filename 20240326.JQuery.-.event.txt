20240326 JQuery - event / 프로젝트 쉐어링

---

이벤트 문법
- addEventListener() 방식이 떠오른다.
- 이벤트 속성명에서, on을 뺀 이름으로 함수명이 짜여져 있다.

---

이벤트 중, 폼 처리 이벤트
- submit 버튼 속성이 button이냐 submit이냐에 따라 처리 방법이 달라짐.
- 제이쿼리에서는 변수가 직접 컨트롤하는게 아니라, 함수로 가져온다는 것을 의식하라. 


- button일 때

유효성 검사 부분을 따로 처리한 후

.submit();

- submit일 때
```
.submit(function(){
// 해당 부분에 유효성 검사 부분을 진행하기

})
```
브라우저에서 제공하는 submit 속성은 페이지로 보내버리는 게 기본동작으로 설정되어 있기 때문에, 
내부 객체인 event의 함수를 활용한다.

event.preventDefault()를 활용하여 기본 동작을 취소시키는 것이다. 이는 중요하다.
	- event.preventDefault() : 기본 동작(default)을 막는(prevent) 것.
-> 
```
.submit(function(event){
// 해당 부분에 유효성 검사 부분을 진행하기
// 특정 조건일 경우 event.preventDefault() 적용
})
```
	
- reset 버튼이 button일 때

```
$("#cform")[0].reset()
```
해당 방식으로 처리한다.
어째서인지는 이해하기가 조금 힘들다...

-> reset() 메서드는 폼을 초기하는 form 객체에서 제공하는 표준 메서드라고 한다.    
그래서 jQuery로 감싸진 폼객체 그대로 reset()메서드를 사용하면 오류가 발생함.

---

하나의 페이지에서, 아이디가 중복되면 안된다.

---

this : 호출한 놈(객체)
-> $(this) 로 활용

$(this) 활용하는 이유
-> 호출한 객체에서, jquery에 있는 함수를 써먹기 위해서.

- this는 선택자가 아니라 객체를 일컫는 말이다. ""을 붙이지 말자.

- this만 사용하면 자바스크립트에서 제공하는 함수를 써야 하지만... 
  이걸 제이쿼리로 감싸면 제이쿼리 함수를 사용할수 있다.

---

개발자들이 event 객체를 받고 나서 가장 많이 사용하는 event 속성은 target이다.

event.target 은 실제로 이벤트가 발생한 요소를 가리킨다.

---

$(A).children()
-> A의 자식들을 가져옴

---

```
    $(document).ready(function () {
      // 정적클릭이벤트
      $("#mylang").children().click(function () {
        $(this).remove();
      });

      //li를 이벤트로 추가
      $("#mylang").append('<li>Jquery</li>');
    });
```

클릭 이벤트를, 기존 $("#mylang").children()들에게만 준다.
<li>Jquery</li>는 클릭 이벤트를 먹지 않은 상태로 올라가는 것.
-> 클릭 이벤트를 먹지 않은 li가 올라간다고 이해하면 된다.

해당 순서가 강제되는 경우에는 어떻게 해결해야 하는가?
-> 정적 이벤트를 동적 이벤트로 바꿔서 넣어주면 된다.

---

동적 이벤트
- 제이쿼리에서 .on() 함수를 활용
```	
// event 객체를 인자로 넣을 때
      $(document).on("click","li",function(event){
        $(event.target).remove();
      });
// event 객체를 인자로 넣지 않을 때
      $(document).on("click","li",function(){
        $(this).remove();
      });
```

---

동적 이벤트 형식
```
      $(document).on(이벤트명,선택자or태그,callback);
```
-> 선택자 or 태그에 해당되는 부분에 특정 이벤트를 발생시켰을 때, callback 함수 내용을 실행하라.
-> document는 웹 브라우저 화면 전체를 총괄하는 객체이기 때문에, 해당 부분이 실행되는 것.

---

현업에서 자주 보게 되는 방식
ajax - json -> es6

---

제이쿼리 내 함수 사용법 
- 함수에 인자를 넣으면, 값을 대입하는 것
- 함수에 인자가 없으면, 값을 가져오는 것.

---

SourceTree 설치

- 다운로드
-> 고급 옵션의 권장 옵션 체크하고 다운로드 진행
-> 막힐 경우 고급 옵션 위쪽 체크 해제하고 다운로드 진행
-> id email은 임의의 값을 사용해도 괜찮음. email은 있는 값 사용하는 게 좋음

---

.git 폴더 위에서 확인할 수 있는 경로를 활용하여 github로 관리되고 있는 파일을 가져올 수 있다.

---

eclipse에서, team - share project를 통해 repository를 생성하면 .git 파일이 생성되는 것이다.

---

.git 파일을 날리면, 깃허브로 관리하지 않기 시작하는 것.
-> 다시 깃허브와 연결할 수 있는 상태가 됨. 에러 사항 발생 시 .git 파일을 삭제하는 경우에 어떻게 되는 것인지 이해하기.

---

파일 단위로 keeping을 하고 싶다.
-> 파일을 ctrl+c, ctrl+v하면서 파일명을 다르게 했었다.

git으로 commit을 하게 되면
-> commit 단위로 rollback을 할 수 있다. 이 부분이 제일 중요한 것.

---

github 생성 시, 기본적으로 master라는 branch를 준다.

- branch 생성 시, 새 브런치명은 dev_프로젝트_날짜 방식으로 정형화하여 생성한다고 한다.
ex) dev_rsp_2024_03_26 

- 개발 시 브런치 생성 수는 전혀 영향이 없다. 자유란 소리.

---

- 팀원들이 만든 소스들을 통합하는 것 : 병합 - merge
- 해당 부분은 현업에서 사용하는 방식이므로 면접 질문으로 나오는 요소들이다.

-> 개발은 쉽지만, branch와 merge 관련 사항에서 에러가 발생.

---

each() 
- 배열로 가져오는 것들을 활용할 때 사용
- 다른 언어의 for문을 생각하면 됨. 반복문.

```
	    $("input:checked").each(function(index,item){
               sum += Number($(item).val());
            }); 
```
혹은
```
            $(".fruit:checked").each(function(){
               sum = sum + Number($(".fruit:checked").val());
            });
```
인데, 위 코드를 많이 쓴다고.

---

