20240423spring security customizing

---

```
		<!-- 스프링 시큐리티 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- 스프링 부트에서는 jsp 태그를 지원 하지 않기 때문에 직접 입력 해야 함 -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
		</dependency>
```

Auto Configuration 발생

---

- Authentication Manager Bean이 in-memory에 저장됨 
-> default user 생성
- login, logout page 제공
- Resource location 들에 접근이 불가

---

SecurityConfig -상속-> WebSecurityConfigurerAdaptor -> HttpSecurity

HttpSecurity가 하는 역할
- 인증 api
- 인가 api

---

```
   @GetMapping("/user/userHome")
   public void userHome() {
	   log.info("userHome()..");
   }
```
위 코드는 아래 코드와 동일하다. 
```
   @GetMapping("/user/userHome")
   public String userHome() {
	   log.info("userHome()..");
	   return "/user/userHome";
   }
```

---

403 에러 : 권한 에러

---

```
<c:url value="/login" var="loginUrl" />
```

c:url 태그는 절대경로를 만드는 것

---

loginPage()
loginProcessingUrl()
defaultSuccessUrl()
failureUrl()
usernameParameter()
passwordParameter()

---

param은 jsp 내장객체이다.
- Spring Security를 사용하여 인증 및 권한 부여를 처리하는 경우, Spring Security는 인증된 사용자의 정보를 JSP 페이지로 전달하는 데 사용될 수 있는 다양한 방법을 제공

---

DB에 넣을 때 권한에 ROLE_을 붙이는 이유
- 과거에 만들었던 파일들과의 호환성을 위해서

---

Spring Security와 DB 연동

---

public class UserDetailsVO implements UserDetails
- UserDetails는 유명한 인터페이스 중 하나라고 한다.

---

id, pw 를 입력하고 로그인을 하자마자
 
username이 있는 걸 딱 확인하고, UserDetailsService를 구현한 클래스 내 구현한 함수 loadUserByUsername가 호출된다.
-> 개발자가 하는게 아닌, spring security에서 호출하는 것.

---

코딩을 잘하는 사람은 로직을 잘 짜는 사람이 아니라, 기존 프레임워크나 라이브러리 등의 로직을 이해하고 활용하는 사람이라고.

- 현업에서는 프레임워크를 개발하는 경우가 거의 없다고.

---

- UserDetails 를 구현하는 클래스 생성 
- 
