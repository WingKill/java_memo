20240214 웹서버 

---
jsp
Node detail
Node js
php
---
로드 존슨이라는 사람이 개발자들이 사용하기 편하게 다시 짠 것
servlet jsp
---
-> servlet이든 뭐든, 상속과 오버라이딩을 활용한 것이다. 그래서 해당 개념을 알고 있는 게 중요한 것.
---
쓰레드할 때, 컨텍스트 스위칭 개념을 말했었다.
---
context path  - 웹 애플리케이션을 서버에 배포할 때 해당 애플리케이션이 서버에서 실행되는 url경로
---
doget() - get 방식으로 치고 들어오면 해당 메서드 호출
dopost() - post 방식으로 치고 들어오면 해당 메서드 호출.

---
챗 gpt의 설명

1.Servlet 클래스: Servlet은 일반적으로 javax.servlet.Servlet 인터페이스를 구현하는 자바 클래스입니다. 또는 HttpServlet 클래스를 상속하여 개발할 수도 있습니다. 이 클래스는 클라이언트의 요청을 처리하고 응답을 생성하는 역할을 합니다.

2.서블릿 생명주기 메서드: 서블릿은 초기화(init), 서비스(service), 소멸(destroy)과 같은 생명주기(Lifecycle) 메서드를 가집니다. 이러한 메서드들은 서블릿 컨테이너에 의해 호출되어 서블릿의 생명주기를 관리합니다.

init(): 서블릿이 처음으로 생성될 때 호출되는 메서드입니다. 이 메서드에서 초기화 작업을 수행합니다.
service(): 클라이언트의 요청을 처리하는 메서드입니다. HTTP 요청의 종류(GET, POST, PUT, DELETE 등)에 따라 doGet(), doPost()와 같은 메서드로 분기하여 요청을 처리합니다.
destroy(): 서블릿이 소멸될 때 호출되는 메서드입니다. 이 메서드에서 정리 작업을 수행합니다.

3.HTTP 요청 처리 메서드: HttpServlet을 상속한 서블릿에서는 클라이언트의 HTTP 요청을 처리하는 메서드들을 오버라이딩하여 구현합니다.

doGet(): 클라이언트의 GET 요청을 처리하는 메서드입니다.
doPost(): 클라이언트의 POST 요청을 처리하는 메서드입니다.
doPut(): 클라이언트의 PUT 요청을 처리하는 메서드입니다.
doDelete(): 클라이언트의 DELETE 요청을 처리하는 메서드입니다.
등등, 클라이언트의 HTTP 요청 메서드에 따라 적절한 메서드를 오버라이딩하여 요청을 처리합니다.

4.HTTP 응답 생성 메서드: HttpServlet을 상속한 서블릿에서는 HttpServletResponse 객체를 사용하여 HTTP 응답을 생성합니다. 응답 코드, 헤더, 본문 등을 설정하여 클라이언트로 전송합니다.
---
tomcat server에서는 데이터 처리를 하는 클래스를 제공하고, 대신 해당 처리를 위한 프로그래밍 규칙을 요구한다.
---
get 방식
- default로 설정되어 있는 방식

post 방식
- 링크가 노출되지 않음. get 방식보다는 더 느림.
---
체크박스의 경우에는 배열로 받고, 출력도 이를 이용하여 출력하면 된다.
---
html charset / request.setCharacterEncoding() / response.setContentType()
세가지를 다 통일시키면 한글도 출력 가능.

request의 요청 사항을 처리하기 전에 먼저 인코딩이 진행되어야 한다.
---
 
html에서 java파일로 연결시킬 수 있는 문법은
	<form action="testing" method="post">
		국어 : <input type="text" name="국어" size="10"> <br /> 
		영어 : <input type="text" name="영어" size="10"> <br /> 
		수학 : <input	type="text" name="수학" size="10"> <br />
		<input type="submit" value="제출">
	</form>
즉, form 태그이다.
드디어 해당 태그 활용법을 배울 수 있게 된 것.
---
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 디버깅을 위해 사용하는 것.
		System.out.println("doPost() ..");
		// parameter를 받기 전 해당 인코딩 작업이 필요함.
		request.setCharacterEncoding("UTF-8");
		response.setContentType("text/html; charset=UTF-8");
		
		String kor = request.getParameter("국어");
		String eng = request.getParameter("영어");
		String math = request.getParameter("수학");
		
		// 첫 작성 시 까먹어서, 검색을 통해 parseInt를 활용. 챗 gpt에서는 약간의 차이가 있다고 표현함.
		// parseInt 는 숫자로만 이루어진 문자열 반환시, valueOf 는 숫자가 아닌 문자열도 포함하여 정수 객체로 반환 
		int kors = Integer.valueOf(kor); 
		int engs = Integer.valueOf(eng);
		int maths = Integer.valueOf(math);
		
		int sum = kors + engs + maths;
		double avg = sum / 3.0;
		double avglittle = (int)(avg * 100) / 100.0;

		PrintWriter writer = response.getWriter();
		
		writer.println("<html>");
		writer.println("<head>");
		writer.println("</head>");
		
		writer.println("<body>");
		writer.println("<h1> 총점 " + String.valueOf(sum) + "</h1>");
		writer.println("<h1> 평균 " + String.valueOf(avglittle) + "</h1>");
		
		writer.println("</body>");
		
		writer.println("</html>");
		writer.close();
	}
해당 내용에서 주의할 점. 
무조건 html의 네트워크상 데이터는 String으로 받는다고 봐도 된다.
연산을 하려면 형변환이 필요하다.
---
String.valueOf(avglittle)와 avglittle을 그냥 대입한 상황의 차이
- 소수점 자리가 제대로 출력이 되는가 안되는가?
---
취직을 하게 되면, 시장에서 가장 많이 요구하는 순서대로 언어를 사용하게 된다고.
회사를 들어가게 되면, 공통적으로 DB는 무조건 꼭 다룬다고 한다.
sql 문을 사용하여 데이터베이스에 접근하는 것.
sql 문을 이용하여 데이터베이스의 데이터를 뽑아내는 걸 자주 하게 된다.

실무에서는 테이블 내 컬럼이 상당히 많은 편이다.
---
웹 프로그래밍에서는 select from .... 이 전부라는 식으로 얘기하는 경우가 있었다고.
---
sql 시험을 보는 회사도 있기 때문에, 쿵스보이에 들어가서 문제를 확인하고 연습해보면 된다.
---
Servlet은 JAVA언어를 이용하여 문서를 작성하고, 출력객체를 이용하여 HTML코드를 삽입
JSP는 Servlet과 반대로 HTML코드에 JAVA언어를 삽입하여 동적 문서를 만들 수 있다.
---
javascript가 react, view 때문에 취급이 확 올라갔다고 한다.
---
jsp = HTML + java + 문법(jsp문법)
---
서버 프로그래밍에서는 java를 최고로 친다는데...
웹이랑 만나면서 그런...
---
jsp 태그 종류

지시자	: <%@	   %>	: 페이지 속성
주석	: <%--	 --%>
선언	: <%!	   %>	: 변수, 메소드 선언
표현식	: <%=	   %>	: 결과값 출력
스크립트릿 : <%	   %>	: JAVA 코드
액션태그    : <jsp:action>	 </jsp:action> : 자바빈 연결
---
현업에서는 옛날 소스 코드도 있고, 정말 개발자들이 다양하게 포진되어 있다.
---
jsp 파일은 이름에 주로 소문자를 사용한다. 대문자를 사용하지 않는다.
---
scriptlet : JSP 페이지 내에서 Java 코드를 실행하는 기능
---
jsp가 돌아가는 원리
- 원리를 모르면 수정이 불가능한 상황이 나올 것
---
jsp의 동작 원리
- 자바 문법이 나오려면, 컴파일하여 .class 파일이 나오는 상태여야 한다.
- 기본적으로 HTML 파일이 아닌 것이다.
-> 개발자가 제작한 .jsp 파일을 .java파일로 만드는 것
-> .jsp 파일이 servlet 파일로 변환된다.

- 클라이언트가 웹브라우저를 통해 .jsp를 요청한다.
-> .jsp 파일이 Servlet 파일로 변환됨(해당 파일은 Catalina라는 폴더 루트에 담겨 있음. )
- 예전에는 _jsp.java로 이름을 붙여서 변환했지만, 최근에는 이름부여방식이 변형되어 있다.

---
- 클라이언트가 웹브라우저로 helloWorld.jsp를 요청하게 되면 JSP컨테이너가 JSP파일을 Servlet파일(.java)로 변환
-> Servlet파일(.java)은 컴파일 된 후 클래스 파일(.class)로 변환되고, 요청한 클라이언트한테 html파일 형태로 응답 
---
현업에서 제일 곤란한 경우
- HTML에서 아무리 수정을 해봐도, 뭔가 규격이 맞지 않는 경우가 있다.
그럴 땐, catalina에 있는 변환된 .java 파일을 확인하여 제대로 변환이 됐는지 확인해야 한다.