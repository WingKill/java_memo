20240201 쓰레드

Stream : 양방향으로 데이터를 보내는 게 안됨. 단방향으로 가야 함.
-> Queue로 구현됨
I.O Stream : 입출력 담당
필터 스트림 : 성능을 강화시키거나, 속도를 빠르게 하는 효과를 주는 스트림. 
---
응용 어플리케이션을 짜게되는 경우에는 쓰레드를 반드시 사용하게 되어 있다.
면접 때도 해당 원리가 상당히 중요하다. 
개념을 반드시 익혀야 한다.
---
프로그램 - 하드 디스크나 SSD에 있는 실행 가능한 파일.
프로세스 
- 프로그램을 실행시키면 메모리에 올라가는데, 해당 상태의 프로그램을 프로세스라 한다.
- 컴퓨터의 경우, 작업 관리자에서 확인이 가능하다.
- 자원(resource)과 쓰레드(thread)로 구성되어 있음.
---
Thread 
- 글자 자체의 의미 : 실타래. 
- 프로세스 내 실제 작업을 수행한다.
- Single Thread Process : 자원 + 쓰레드 
: 쓰레드 1개와 자원으로 구성된 프로세스
- Multi Thread Process : 자원 + 쓰레드 + 쓰레드 + ...
: 자원과 2개 이상의 쓰레드로 구성된 프로세스
---
- 실제로, OS 개발되기 전에 최초로 8bit 보급형 컴퓨터가 보급되던 시절에는 
하나의 프로그램 실행 시 다른 프로그램을 실행할 수 없었다.
- CPU : 연산 속도가 빠르다는 장점.
-> 빅데이터, AI 개발
- 하드웨어 속도가 증진됨에 따라 개발영역이 늘어나게 된 것.
---
이론상, 1개의 CPU는 1개의 프로그램만 실행시킬 수 있다.
그런데 어떤 원리로 동시에 프로그램들을 실행시킬 수 있는가.
- 코어를 생각하지 않고 생각해보기. 코어가 생기기 이전에도 다중 실행이 가능했으니...
- 시분할
- 운영 체제는 CPU의 시간을 작은 단위로 나누어 각 프로그램에게 할당한다. 
- 각 프로그램은 할당된 시간 동안 CPU를 사용하여 실행된다.
- 이 할당된 시간이 매우 짧아서 사용자는 여러 프로그램이 동시에 실행되는 것처럼 느끼는 것이다.
- 프로세스가 많게 되면 렉이 걸리게 된다. -> 메모리가 가득찬 상태인 것.
---
멀티 프로세스 : 동시에 여러 프로세스를 실행시키는 것.
---
쓰레드 : 
- 프로세스 안의 작은 프로세스
- 프로그램 안의 작은 프로그램
- 프로그램 안의 독립된 프로그램
- 프로그램 안에서, CPU가 하나 하나 돌려야 하는 것
- 하나의 프로그램 안에서 따로따로 돌아가야 하는 것.
라고 한다면 쉽게 이해할 수 있다.
---
Thread 클래스를 상속하는 객체가 사용가능한 메서드 중
run()은 Main()의 역할이라고 생각하면 된다.
---
자바가 쓰레드를 돌리는 게 아니다.
각각의 쓰레드와 프로세스를 돌리는 역할은 OS가 하기 때문이다.
결국 자바는 OS 별로 제공되는 함수를 가져와 이를 호출하는 것이다.
---
컨텍스트 스위칭
- 현재 실행중인 프로세스나 쓰레드의 상태를 저장하고 다음 실행할 프로세스나 쓰레드의 상태를 복원하는 작업
- 여러 프로세스나 쓰레드가 동시에 실행될 수 있도록 하는 핵심 매커니즘
- 현재 실행 중인 프로세스나 쓰레드의 상태를 저장.
- 다음 실행할 프로세스나 스레드의 상태 복원.
- CPU 성능에 따라 해당 과정에 걸리는 속도가 빠를 수도, 느릴 수도 있다.
---
해당 쓰레드는 소프트웨어에서의 쓰레드를 정의하는 것.
하드웨어에서의 쓰레드는 하나의 CPU 코어에서 실행되는 실행 흐름(CPUT 코어의 실행 단위)을 말한다고.
해당 부분은 검색해봤는데, 모든 게시글이 확실히 소프트웨어에서 말하는 쓰레드랑 하드웨어에서 말하는 쓰레드는
엄연히 다르다는 걸 강조한다. 
https://kdhyo98.tistory.com/102
---
자바 프로그래밍에서, main()도 쓰레드로 처리한다고.
---
		String input = JOptionPane.showInputDialog("아무 값이나 입력");
		System.out.println("입력하신 값은 " + input + "입니다");		
		for(int i = 10; i> 0; i--) {
			System.out.println(i);
			try {
				// 1초간 시간을 지연한다. 다른 쓰레드(다른 프로세스)에게 실행하게끔 양보한다.
				Thread.sleep(10000); 				 
			} catch (Exception e) {	}
		}
-> 응용 어플리케이션에서 한번씩은 사용하는 코딩이라고.
---
자바에서 다이얼로그 창 띄우기
```
String input = JOptionPane.showInputDialog("아무 값이나 입력"); 
```
: 메세지는 안내 메세지를 입력하는 것. 해당 메서드는 String 데이터 타입으로 리턴하기 때문에
해당 방식으로 사용하는 것.
---
Object에서 사용하는 쓰레드 관련 메서드 중 interrupt()는 사용 시 문제가 많아 활용하지 않는다고.
---
쓰레드의 동기화 (어렵다고 말하는 이유 중 하나.)
- 
---
웹 프로그래밍에서는 쓰레드를 사용할 일이 없음. 
내부적으로 돌고 있기 때문이다.
응용 소프트웨어에서는 쓰레드를 활용한다.
게임에서도 ... 쓰레드를 활용할 수밖에 없다. 속도 때문에. 
쓰레드 못 짜면 게임 못 짠다고 봐야 한다.
---
채팅 - 쓰레드 응용의 대표적인 예
---
쓰레드에서 가장 중요한 것 중 하나 : 동기화
접속을 하기 위해서는 쓰레드를 쓸 수밖에 없다.
---
다수의 쓰레드 자원 하나를 공유하는 상황인데 동기화하지 않는 경우
- 데이터 일관성을 해친다.
- 무한정 대기 발생 가능.
- 쓰레드 하나가 계속 실행이 미뤄져서 결국 실행을 못함
- 공유 자원을 동시에 변경 시 프로그램 상태가 불일치할 수 있음.
---
해당 과정이 발생하는 이유
- 쓰레드가 경쟁적으로 공유 자원을 접근하기 때문에 발생하는 것.
---
synchronized : 쓰레드의 동기화를 진행하는 키워드
---
임계 영역 
- 다수의 쓰레드가 침범하면 안되는 영역
---
다수의 쓰레드가 같은 자원을 공유하는 경우
에러가 발생하는 이유는, 기존 쓰레드 내 함수가 작업을 완벽하게 끝나기도 전에 
타 쓰레드에서 접근하여 자원을 바꾸기 때문이다.
그러므로, 함수 작업이 끝나기 전까지는 다른 쓰레드에서 접근하지 못하게 막으면 에러가 발생하지 않는다.
이를 동기화라고 한다.
---
해당 부분에 대해 면접관이 원하는 대답
- Method Area, Call Stack, heap 영역같은 용어를 사용하길 원한다고.
-> 같은 프로세스 안에 있는 여러 쓰레드들은, 같은 힙 공간을 공유한다.
반면, 프로세스는 다른 프로세스의 메모리에 직접 접근이 불가능하다.
- .start() : 쓰레드들을 생성한다는 개발자간의 약속
- 프로세스 내 쓰레드를 새로 생성 시, 
-> call stack만 새로 생성하고 나머지 영역은 프로세스 내 메모리를 공유하기 때문에
-> 동기화 문제가 생기는 것.
-> 즉, 자바로 치면 지역 변수를 공유한다는 것.
-> 자바에선 모든 쓰레드들이 함부로 해당 영역을 접근하지 못하도록 제어하는 키워드를 제공.
-> synchronized
---
쓰레드 사용 시 장점
- 프로세스로 다 만드는 것보다 상대적으로 메모리를 아낀다.
쓰레드 사용 시 단점
- 동기화 문제가 생길 수 있다.
- 디버깅이 어렵다.
---
네트워킹 : 소켓 - 웹 브라우저의 원리 
쓰레드
스트림

채팅은 위 3가지를 이용해 짜게 되는 프로그램이다.
---
개발자들 중, 데이터를 다루는 직종이 급여가 높은 편이라고 보면 된다.
근데 검색해보면 취급은 DBA가 예전 같지 않구나라고 말하는 경우가 꽤 있다.
---
