20240429 Test 마무리 및 Spring Legacy 

---

403 에러 : 접근 권한 관련 에러

---

Spring Legacy
- Spring 측에서 링크를 아예 끊어서, Spring Legacy를 생성하지 못하도록 함.(공식적으로 확인된 사항이라고 함.)
-> 메뉴를 한 개씩 만들던지, 기존 파일을 활용하던지 둘 중 하나로 해야 함.

현업에서 Legacy를 다루게 될 확률이 높으므로, 기존 파일을 활용해 해당 수업을 진행하고자 함

---

Spring에서는 Spring version이 중요하다
- 3,4,5 버전으로 구성되어 있음
-> 현업에서 가장 많이 쓰는 것은 3,4 버전
- 5버전부터 Spring boot가 들어감.

특히 3버전, 자바 1.6버전 활용

---

은행권에서는, 기존 개발 방식처럼 외부에서 링크로 가져오지 않는다. 
- systemPath를 활용하여 직접 다운로드한 파일의 경로를 넣음
- 해킹 위험 때문에 이렇게 한다고.

---

<properties>에 들어가는 것들은 변수들이다.

---

Spring boot에서는 pom.xml을 한번 더 개선시킨 것
- spring-boot-starter-parent 아키텍처를 태그를 통해 삽입만 해주면, 버전을 맞춰서 내부에서 다 다운로드해줌.

Spring Legacy에서는 개발자가 필요한 파일을 일일히 다 끌고와야함

-> Spring은 설정이 반이다.

---

Spring에서 기본이 되는 라이브러리
- IOC container class를 가지고 있는 파일
- 이 라이브러리가 없으면 Spring이 작동되지 않음.
```
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
```

---

로깅 관련 파일도 4가지가 있다.
- slf4j-api
- jcl-over-slf4j
- slf4j-log4j12
- log4j

---

@Inject : @Autowired 대신 사용할 수 있는 annotation

---

신입들이 web.xml을 잘 볼 줄 모른다.

개발자들이 프로젝트를 확인할 때 체크하는 파일 
- pom.xml 
- web.xml 
- root.xml(servlet.xml) : 2개의 파일로 나눠서 하는 경우도 있음.

---

5월 6일부터 프로젝트 시작
- 오전 2시간, 오후 2시간 수업
-> 수업시간에는 DB 설계를 배운다.

-> 5월 1일로 바뀐 거 같다.

---

Spring Legacy에서 web.xml을 활용하는 것
- web.xml : 톰캣 설정 파일
- 현업에서는 톰캣 대신 제우스를 많이 쓰기 때문에, 톰캣 설정 파일이라는 표현은 지양한다.
- WAS(Web Application Server) 설정 파일이라고 말하는 게 좋다.

Spring Boot에서는 pom.xml을 제외한 설정 파일들을 숨기고, 설정을 전부 .properties로 할 수 있게 한 것.
Spring Legacy에서는 필요한 설정 파일들 (.xml)을 그대로 활용하는 것.

---

Servlet : 웹 애플리케이션에서 클라이언트의 요청을 처리하고 응답을 생성하는 자바 기반의 서버 측 프로그래밍 기술

---

Spring Legacy에서는 <artifactid>에 설정된 이름이 컨텍스트명으로 들어간다.
- 해당 이름으로 나눠서 프로젝트를 관리하며, 해당 메모리 영역을 서블릿 컨테이너라고 한다.

web.xml
- 기본적인 jsp 메모리 영역 이외의, 전역적인 접근이 가능한 서블릿 영역을 만들어 주는 부분
```
	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
```
- 리스너
	- 생성될 때, 혹은 소멸되기 전에 해야 하는 작업을 설정하는 것
	- 예를 들어 ServletContextListener의 경우에는, contextInitialized()와 contextDestroyed()를 구현하라고 함.
	-> 각각 웹 어플리케이션 컨텍스트가 초기화될 때, 소멸될 때 호출됨.(웹 어플리케이션 실행 및 종료를 담당)

	- 아래 태그는 스프링 내 생성되는 
```
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
```

@WebServlet("/") 부분
```
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
```

---

root-context.xml
- Mybatis에서는 sqlSessionFactory까지 메모리에 세팅이 되어 있어야 한다.
- Spring boot에서는 mybatis 및 .properties 설정을 추가하면 Mybatis 세팅 과정을 자동으로 처리해줬지만, 
Spring Legacy에서는 직접 메모리에 올려줘야 한다. 

```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property> -->
		<!-- <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:49161:XE"></property> -->
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe"></property>
		<property name="username" value="scott"></property>
		<property name="password" value="tiger"></property>
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig"></constructor-arg>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<mybatis-spring:scan base-package="org.zerock.mapper"/>
	
	<context:component-scan base-package="org.zerock.sample"></context:component-scan>
		
</beans>
```

---

servlet-context.xml
- ...

---

web.xml
- DispatcherServlet을 포함함.


- root로 치고 들어왔을 때 controller를 실행시켜야 한다.
- controller를 실행할 때, 이에 관여하는 객체가 2가지 있다
	- HandlerMapping : 해당 루트를 가지고 있는 객체(컨트롤러)를 찾음
	- HandlerAdaptor : 해당 객체 내 루트에 대한 처리를 담당하는 함수를 찾음
	- Spring 2버전에서는 일일히 다 적어서 처리하지만, 3부터는 해당 부분을 하나의 태그를 통해 자동으로 생성시킬 수 있게 됨.
	-> 소스 코드상으로 태그 하나 추가
```xml
	<!-- 핸들러 아답터와 핸들러 매핑 객체 생성 -->
	<annotation-driven />
```

	- controller에서 String 리턴타입으로 선언하는 문법은, 내부적으로 ModelAndView 리턴타입으로 바꿔서 DispatcherServlet 객체에 다시 전달한다고.
	
	- ViewResolver는 controller에서 전달받은 데이터 중 view 설정을 처리

---

Spring 세팅 문제 때문에라도, Spring 실행 순서는 외워질 수밖에 없다고.

---

- 주입(injection)
- IOC
- IOC 컨테이너

---

IOC 컨테이너를 기본적으로 2개를 생성
	- Servlet WebApplicationContext
	- Root WebApplicationContext

- 먼저 Root WebApplicationContext가 생성되고, 이후에 Servlet WebApplicationContext를 생성함.
	- Servlet WebApplicationContext의 객체에서는 Root WebApplicationContext의 객체를 가져올 수 있다.
	- 반대로 Root WebApplicationContext의 객체에서는 Servlet WebApplicationContext의 객체를 가져올 수 없다.

-> Root WebApplicationContext가 생성되고 나서. '해당 내용을 바탕으로 하여' Servlet WebApplicationContext를 이후에 생성함.

---

배포하게 될 때, 기본적으로 pom.xml의 <artifactId> 내 텍스트로 설정된다.

---

Spring Legacy에서 Test 파일에 들어가는 annotation
```java
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
```

---

legacy는 상당히 설정을 자주 만지게 만드는 상황이 나온다. 어우...

---