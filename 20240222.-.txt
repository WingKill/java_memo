20240222 웹 프로그래밍 - 회원 인증 프로그래밍, EL

---

html에서 input에 제공해주는, 날짜 입력하게 해주는 타입은 date이다.
<input type="date">

---

sql 쿼리 자바에서 작성 시 특히 주의해야 할 점
- 공백이 있어야 하는 부분은 확실히 표현해야 한다. 문자열 연결 방식으로 표현할 때, 특히 이 부분을 간과할 수 있다.
- 자바에서 쿼리를 넣을 땐 세미콜론(;)을 문자열 내에 넣으면 안된다. 오류 생긴다.

---

html에서 날짜가 어떻게 넘어오는지 sysout을 통해 한번 체크해주는 게 좋다.
2024-02-22 기준, html5에서는 <input type="date">를 통해 넘어오는 문자열 형태가 "2024-02-22" 형태이다.

---

본인 날짜를 input을 통해 입력해서 받는 경우에는,
날짜를 받는 dto 내 변수를 String으로 선언하고 그대로 데이터베이스에 넘겨도 된다.
근데 html에서 넘겨주는 input type="date" 의 값에는 시,분,초가 포함되어 있지 않다는 점을 염두해두자.

즉, 날짜 타입에 맞게 포맷된 문자열을 제공하는 경우에는 굳이 SimpledateFormat 클래스와 같은 포맷 클래스를
활용하지 않고 그대로 데이터베이스에 문자열로 보내도 된다.

---

<input type="button" value="회원가입" onclick="javascript:window.location='join.jsp'">
자바 스크립트는 해당 방식으로 처리한다고 한다. 

---

- 페이지 이동
- 세션
- DB
이 세 가지가 training되어있다면 spring을 할 수 있게 된다고.

---

역시... 데이터베이스에서 쿼리를 실행하는데 key가 있는 곳에 같은 값이 들어갈 리가 없다.
프로젝트용 데이터베이스에 key가 배정되어 있지 않았다. 이런 큰 실수를...

아무튼, 쿼리에 오류가 있다면 에러 메세지를 띄우며 실행되지 않는다. 
서버에서는 해당 조건을 else 문에 넣어서 클라이언트에 동일 페이지를 노출시켜줄 것이다.

---

현업에서는 <% %> 와 <jsp>는 잘 안쓴다.
el, jstl을 자주 쓴다고 한다.

---

EL : Expression Language
- 표현식 또는 액션태그를 대신해서 값을 표현하는 언어

<%= value %> -> ${ value }

---

EL과 sriptlet(expression)의 차이
- expression은 자바에 있는 변수 값을 jsp페이지에서 표현하기 위해 가져오는 것
- 웹 페이지에서 달라고 하면, 서버 쪽에서 해당 scriptlet이 html 코드로 변환시키는 것.
- EL은 자바 변수를 출력하는 게 아니다.
-> scope 영역(pageContext, request, session, application)에 저장된 것들을 뿌려주는 것.

---

<%
	int a = 10;
	String str = "바다";
%>
의 경우에는 JVM에 있는 call stack에서 빼오는 것이다.  
(tomcat 자체에도 java가 있기 때문에, jvm이 있어야 java 파일을 해석할 수 있다.)

scope 영역에 저장되는 값들이 아니기 때문에, EL로는 해당 값을 가져올 수 있다.

---

기본적인 Dto 클래스 구조 : private 변수, 기본 생성자, setter and getter
EL로 쓰기 위해 객체를 scope에 가져와서 대입한 상태일 때, 
EL student 출력 : ${student.age}<br>
EL student 출력 : ${student.getAge()}<br>
둘 다 사용할 수 있다.

단, ${student.age}는 ${student.getAge()}의 다른 표현일 뿐, 직접 변수를 호출하여 가져온 것이 아니다. 
즉, getter가 없으면 에러가 발생한다.

---

기존에 배우면서 scriptlet으로 표현했던 것들을 이제 EL로 다 바꾸는 방법을 배워야 한다.

---

<h1>EL 산술 연산자</h1>
${10+20}<br><!-- 30 -->
${"10+20"}<br><!-- 10+20 -->
${10 div 20}<br><!-- 0.5 -->
${10 / 20}<br><!-- 0.5 -->
${10 mod 20}<br><!-- 10 -->
${10%20}<br><!-- 10 -->

---

<h1>EL 관계 연산자</h1>
${10 == 11}<br><!-- false -->
${10 lt 11}<br><!-- less than : 미만 --><!-- true -->
${10 gt 11}<br><!-- greater than : 초과 --><!-- false -->

---

${empty title}<-- null 체크 -->

---

특히, EL을 사용할 때 이클립스에서 에러 메세지를 보내는 경우가 있지만.. 너무 신경쓰지 않아도 된다.
이클립스가 auto compiling을 먼저 해줘서 에러 메세지를 보내주는 것이다.

주로 EL에서, 산술 연산자 div를 사용할 때 주로 에러 메세지를 보낸다.

---

EL 내장 객체

EL 사용 시, 사용하게 될 EL 내장 객체들. 
이를 자주 사용하게 된다고 한다.

pageScope : page객체를 참조하는 객체
requestScope : request객체를 참조하는 객체
sessionScope : session객체를 참조하는 객체
applicationScope : application객체를 참조하는 객체

param : 요청 파라미터를 참조하는 객제
paramValues : 요청 파라미터(배열)를 참조하는 객제
initParam : 초기화 파라미터를 참조하는 객체
cookie : cookie객체를 참조하는 객체

---

<%
	String id = request.getParameter("id");
%>
<% = id %>

는 ${param.id} 나 ${param["id"]} 만으로도 표현할 수 있다.

---

EL 내장 객체는 꼭 외워줘야겠다.

---

