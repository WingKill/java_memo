20240404 Spring - 다루기 위한 지식들

---

@RequestMapping()
- 처음에 controller를 디자인할 때는 항상 이걸로 썼다고.
- 3버전에서는 해당 방식으로 사용해야 한다.
- 사용 방법은 다음과 같다.
```
@RequestMapping(value = "/board", method = RequestMethod.GET)
```


5버전부터는 따로 @GetMapping 등의 Method 방식에 따른 에너테이션이 추가됐다.

---

함수 위에 Mapping annotation을 달게 되면
```java
// void
	@RequestMapping(value = "/board/content")
	public void content() {
		System.out.println("content()..");
	}
```
```java
// return
	@RequestMapping(value = "/board/content")
	public String content() {
		System.out.println("content()..");
		return "board/content";
	}
```
두 가지는 동일하다.

- void로 되어 있을 경우, 내부적으로 return값이 있는 것으로 변환시킨다고 한다.

---

면접 때는 질문 사항에 해당되는 내용 요약이 되지 않는 경우, 이전에 관련된 내용으로 프로젝트 코딩했던 걸 차분히 얘기하면 된다. 

---

forward(전달)
redirect(다시보내기)

---

view에 데이터를 전달해보기
- jsp/servlet에서는 request 영역에 객체를 올리고, 해당 요청을 forwarding했다.
- spring에서는 

```
	@RequestMapping(value = "/board/content")
	public void content(Model model) {
		System.out.println("content()..");
		model.addAttribute("id", 30);
		model.addAttribute("age", 30); 
		model.addAttribute("name", "홍길동"); 
	}
```

다음과 같이 진행하게 된다.
- Model 객체를 파라미터로 받음
- Model 객체에 데이터를 담음
- 컨트롤러에서 전달 받은 Model객체의 속성을 이용함.

---

그러면 Model 객체를 제공해주는 주체는 누구인가?
-> DispatcherServlet 
	- WebApplicationContext
	- Root WebApplicationContext 
		- @Controller는 Root WebApplicationContext 내에 객체를 생성
		- Model 객체는 컨트롤러 메서드에서 파라미터로 선언하여 사용.
		-> Spring에 종속된다. Spring으로 컨트롤할 수 있게 된다.
		
---

Spring에 종속된다의 의미
-> Spring에 맞춰서 코딩해야 한다. 실력이 늘지 않는다는 생각이 들 수 있다고.
 
---

현재 시간을 보여주기 위해, Locale 객체도 포함시킨 상태.
```
	@RequestMapping(value = "/board/content")
	public void content(Model model, Locale locale) {
		System.out.println("content()..");
		
		model.addAttribute("id", 30);
		model.addAttribute("age", 30); 
		model.addAttribute("name", "홍길동");
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG,locale);
		
		String formattedDate = dateFormat.format(date);
		model.addAttribute("serverTime", formattedDate);
	}
```
Locale 객체는 지역 또는 국가와 관련된 정보를 나타내는 클래스
- 특정 언어, 국가 및 지역 관례에 따라 텍스트, 숫자, 날짜 및 시간을 형식화하는 데 사용

---

1. Model 타입의 객체를 매개변수로 받고, 해당 객체에 속성을 추가함.
2. ModelAndView 타입의 객체를 매개변수로 받거나 새로 선언한 뒤, 해당 객체에 데이터를 추가한 뒤 뷰이름을 설정하고 해당 객체를 리턴

```
	@RequestMapping("/board/reply")
	public ModelAndView reply() {
		System.out.println("reply()..");
		ModelAndView mv = new ModelAndView();
		mv.addObject("id",30);
		mv.setViewName("board/reply");
		
		return mv;			
	}
```
- ModelAndView 객체 생성
- Model 객체에 데이터를 담음
- 뷰이름 설정

---

Dispatcher Servlet 안에 IOC Container가 있기 때문에, 모든 객체들이 DispatcherServlet을 걸치게 되어 있다.

---

Spring은 설계에서부터 주입이 되게끔 만들어놨기 때문에, 개발자가 따로 객체를 생성하지 않아도 Spring에서 해당 객체를 만들어 주입시켜주는 상태라고.

```
	@RequestMapping("/board/grade")
	public ModelAndView grade(ModelAndView mv, Grade grade) {
		System.out.println("grade()..");
		grade.setKor(80);
		grade.setEng(70);
		grade.setMath(80);
		
		mv.addObject("grade", grade);				
		return mv;
	}
```

---

/shape/rectangle 로 하고 싶다면 개발자들은 클래스 위에도 mapping하는 방식을 주로 택한다고 한다.
```
@Controller
@RequestMapping("/shape")
public class ShapeController {
	
	@GetMapping("/rectangle")
	public String rectangle() {
		System.out.println("rectangle()..");
		
		return "home";
	}
}
```

---

면접 중 jsp/serlvet에서 form태그를 통한 데이터 전달에 대해 질문받았을 때, doGet()과 doPost()를 언급해야 한다.
	
---

get 방식, post 방식
- 데이터 전달이 링크에 노출되는가 아닌가 

---

request, response 객체
- 

jsp
- 내장객체 request를 통해 스크립틀릿으로 바로 불러올 수 있다.

spring
- 기존 tomcat에 있는 내장객체를 그대로 사용 가능

---

spring에서 기존 request, response를 그대로 활용할 경우 생기는 단점
	- 형변환이 필요한 경우, 전달 데이터마다 형변환을 일일히 해줘야 한다.
	-> 형변환 annotation 지원. @RequestParam 
	-> 해당 annotation은 함수의 매개변수 앞에 써준다. 해당 매개변수는 내부적으로 request에서 파라미터를 가져와 
	- 전달되는 파라미터가 많은 경우, 일일히 getParameter()를 통해 하나씩 받아와야 한다.
	
---

lombok 설치
	- lombok 다운로드 창 가서 다운로드하기.
	- cmd 창 열기
	- lombok 위치를 찾기 쉬운 위치로 옮기기.
	- 'java -jar lombok.jar'을 쳐서 installer를 실행하기
	-> specify location 을 STS로 설정(작업 툴 위치로 설정)
	-> install/ update 진행
	-> install successed가 뜨면 종료.

-> pom.xml에 해당 내용이 있다면, install이 제대로 된 것.
-> 물론 해당 내용을 제대로 적용시키려면, STS 자체를 껐다가 다시 켜야 한다.
```
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
```

---

lombok에서는 @Getter를 지원한다. 클래스명 위에 해당 annotation을 적용시키면, 내부 변수들의 getter를 생성해준다.

---

eclipse 창시자, 디자인 패턴 저자, Junit 창시자 - 에릭 감마

---

Test 폴더 내 파일 생성
- test를 진행할 파일에서 'new - JUnit Test Case' 옵션 클릭
-> 설정 건들지 않고 그대로 생성하면 src/text/java에 해당 파일이 패키지와 함께 생성된다.
-> Run As - JUnit Test를 통해, 테스트 성공 및 실패를 확인할 수 있다. 녹색 : 성공, 붉은색 : 실패

---

정리되어 있는 것들이 제대로 정리되어 있는지만 확인.
- 귀찮아함... 
- 한 눈에 확인할 수 있는 정리본들을 본다고.
-> JUnit Test file 유무를 확인한다고 한다. (100%는 아님. 면접관마다, 확인하는 포인트가 있다는 것.)

---

JUnit Test file 내에서는 assert 시리즈라고 불리는 메서드들(assert로 시작하는 메서드들)을 활용하여 
일치 여부, null 체크, 참 거짓 여부 등을 따질 수 있다.

---

lombok은 자동으로 생성을 하기 때문에, 변수 순서가 변경되면 바로 에러가 발생해버린다. 
주로 사용하는 lombok의 annotation은 
```
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
```
여기에 더해
```
@RequiredArgsConstructor
```
5가지를 사용한다고 한다.


@ToString의 경우에는 JP와 연계해서 사용할 경우 문제를 일으켜서 안쓴다고......................
- toString() 자체가, @Override되는 클래스가 워낙 많다보니... 필요할 때만 쓴다고.

@Data
- 5가지를 한꺼번에 적용시킨다고 한다.
- 해당 annotation의 경우에는, 문제를 일으킬 수 있는 annotation까지 저절로 적용시켜버리므로 너무 남발하면 안된다.
	- @Getter
	- @Setter
	- @RequiredArgsConstructor
	- @ToString
	- @EqualsAndHashCode 

---
